{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"r2u: CRAN as Ubuntu Binaries Key features Full integration with apt as every binary resolves all its dependencies: No more installations (of pre-built archives) only to discover that a shared library is missing. No more surprises. Full integration with apt so that an update of a system library cannot break an R package: if a (shared) library is used by a CRAN, the package manager knows and will not remove it. No more (R package) breakage from (system) library updates. Installations are fast, automated and reversible thanks to package management layer. Fast and well-connected mirror at r2u.stat.illinois.edu on the Internet2 Complete coverage with (currently) ~ 20,000 CRAN packages (and 240+ from BioConductor). Complete support for both Ubuntu 20.04 (\"focal\") and Ubuntu 22.04 (\"jammy\"). Optional (but recommended) bspm use automagically connects R functions like install.packages() to apt for access to binaries and dependencies. Brief Demo The gif below shows how one install.packages(\"tidyverse\") command on an Ubuntu 20.04 system installs all packages and dependencies as binaries in 18 seconds (by passing the R package installation to apt using bspm ). This uses the Docker container referenced below, which has been set up with the five easy setup steps detailed here. What is Covered ? We generally support amd64 ( i.e. standard Intel/AMD cpus) for the Ubuntu LTS release and the predecessor release. We use 'r-release' just like CRAN. So currently the 'focal' 20.04 LTS and 'jammy' 22.04 LTS releases are fully supported. Support for other cpu architectures is certainly possible but somewhat unlikely due to a lack of (additional hardware) resources and time. Support for other distributions is possible but unlikely right now (due to a lack of resources and time). We hope to cover Debian at some point. Current versions are R 4.2.2, and BioConductor release 3.16 packages are provided when required by CRAN packages. What is Selected ? Everything :) Initially, we started from cran-logs by picking the N most-downloaded packages, along with their dependencies from BioConductor. (It should be noted that for example the first 100 packages already account for approximately half the total downloads: it is a very skewed distribution.) We iterated, and fairly soon arrived of full coverage of CRAN. So we now cover all CRAN packages (modulo at best handful of blacklisted ones) including all packages needing compilation all BioConductor package that are implied by these (and build for us). This currently resuls in 20410 and 20308 binary packages from CRAN in \"focal\" and \"jammy\", respectively, and 249 and 245 BioConductor packages, respectively, from the 3.16 release. The sole exception are a two packages we cannot build (as we do not have the required commercial software it accessess) plus less than a handful of 'odd builds' that fail and are skipped. What is it Based On? For the CRAN binaries we either repackage RSPM builds (where available) or build natively. All selected BioConductor 3.16 packages are built natively. For all of these, full dependency resolution and integration with the system is a key feature. Everything is provided as .deb binary files with proper dependency resolution by using a proper apt repo which also has a signed Release file. Usage and Setup (Note that you could use this script add_cranapt_focal.sh or the variant for jammy to facilitate the setup but you may prefer to execute the steps outlined here by hand.) First add the repository key so that apt knows it (this is optional but recommended) apt install --yes --no-install-recommends wget # to add the key wget -q -O- https://eddelbuettel.github.io/r2u/assets/dirk_eddelbuettel_key.asc \\ | tee -a /etc/apt/trusted.gpg.d/cranapt_key.asc Second, add the repository to the apt registry. You can use the original host echo \"deb [arch=amd64] https://dirk.eddelbuettel.com/cranapt focal main\" \\ > /etc/apt/sources.list.d/cranapt.list apt update or use the mirror at the University of Illinois Urbana-Champaign : echo \"deb [arch=amd64] https://r2u.stat.illinois.edu/ubuntu focal main\" \\ > /etc/apt/sources.list.d/cranapt.list apt update (In either example, replace focal with jammy for use with Ubuntu 22.04.) Third, and optionally, if you do not yet have the current R version, run these two lines (or use the standard CRAN repo setup ) wget -q -O- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc \\ | tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc echo \"deb [arch=amd64] https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/\" \\ > /etc/apt/sources.list.d/cran-ubuntu.list (Again, replace focal with jammy for use with Ubuntu 22.04.) Fourth, add repository 'pinning' as apt might get confused by some older packages (in the Ubuntu distro) which accidentally appear with a higher version number. See the next section to ensure 'CRANapt' sorts highest. After that the package are known (under their r-cran-* and r-bioc-* names). You can install them on the command-line using apt and apt-get , via aptitude as well as other front-ends. Fifth, and also optional, install and enable the bspm package so that CRANapt and other packages become available via install.packages() and update.packages() . Note that you may need to install it directly from source via sudo Rscript -e 'install.packages(\"bspm\")' to ensure it integrates correctly with the packaging system. You should also install Python components used internally by bspm via the sudo apt-get install python3-{dbus,gi,apt} command. Pinning Because we let apt (and related tools) pick the packages, we have to ensure that the CRANapt repo sorts higher than the default repo as (older) package builds in the distribution itself may appear (to apt ) to be newer. A case in point was package gtable whose version in Ubuntu was 0.3.0+dfsg-1 which accidentally sorts higher than the rebuild we made under a newer and more consistent version number 0.3.0-1.ca2004.1 . One possible fix is 'apt pinning'. Place a file /etc/apt/preferences.d/99cranapt with content Package: * Pin: release o=CRAN-Apt Project Pin: release l=CRAN-Apt Packages Pin-Priority: 700 which will now give packages from this repo a higher default priority of 700 overriding the standard value of 500. Docker There are also two Docker containers for Ubuntu 20.04 'focal' and 22.04 'jammy', respectively, at eddelbuettel/r2u that have the above, including pinning and bspm support, already set up. Note that with recent builds of Docker (and possibly related to Ubuntu hosts) you may have to add the --security-opt seccomp=unconfined option to your Docker invocation to take advantage of bspm and the full system integration inside the container. This is also documented in the FAQ . We also found that when building containers based off the r2u containers, we could not rely on the nice bspm integration as it requires superuser rights to pass off commands from install.packages() to apt . You can still use r2u containers as a base, but sadly have to turn off bspm and use just apt commands to install packages. Try It Use this link below (after possibly signing up for gitpod.io first) and run one of the three example scripts , or just start R in the terminal window. The gif below display running one such example to install brms from binaries in a few seconds. Using this requires only (free) GitHub and GitPod accounts. Support Please file issues at the GitHub issues for r2u . Known Issues The littler package reflects build-time configuration, the RSPM binary is then expecting a different R location so it needs a binary rebuild. Added a 'force' flag, may need a list similar to the blacklist to always compiled. A small number of packages do not build for lack required components; examples are ROracle and Rcplex. They, and their reverse dependencies, are are blacklisted and not built. r2u is an apt repo, which via bspm becomes used \"automagically\" via standard R calls of install.packages() and alike. That last part is important: package installations that do not use install.packages() (such as renv , rig , ...) do not benefit from install.packages() calling apt for you, and cannot take advantage of r2u via bspm . bspm traces calls to install.packages() and maps them system-wide installation via apt . By choice, it does not map the remove.packages() for package removal, see this issue for more discussion. Packages can be uninstalled via the system package manager using, respectively, apt , dpkg or one of graphical frontends as well as via the R function bspm::remove_sys() . Author Dirk Eddelbuettel License The repository-building code in this package is released under the GPL (>= 2). All CRAN and BioConductor packages are released under their respective licenses. Acknowledgment This was made possible by the generous support of endless coffee thanks to my GitHub Sponsors .","title":"CRAN as Ubuntu Binaries"},{"location":"#r2u-cran-as-ubuntu-binaries","text":"","title":"r2u: CRAN as Ubuntu Binaries"},{"location":"#key-features","text":"Full integration with apt as every binary resolves all its dependencies: No more installations (of pre-built archives) only to discover that a shared library is missing. No more surprises. Full integration with apt so that an update of a system library cannot break an R package: if a (shared) library is used by a CRAN, the package manager knows and will not remove it. No more (R package) breakage from (system) library updates. Installations are fast, automated and reversible thanks to package management layer. Fast and well-connected mirror at r2u.stat.illinois.edu on the Internet2 Complete coverage with (currently) ~ 20,000 CRAN packages (and 240+ from BioConductor). Complete support for both Ubuntu 20.04 (\"focal\") and Ubuntu 22.04 (\"jammy\"). Optional (but recommended) bspm use automagically connects R functions like install.packages() to apt for access to binaries and dependencies.","title":"Key features"},{"location":"#brief-demo","text":"The gif below shows how one install.packages(\"tidyverse\") command on an Ubuntu 20.04 system installs all packages and dependencies as binaries in 18 seconds (by passing the R package installation to apt using bspm ). This uses the Docker container referenced below, which has been set up with the five easy setup steps detailed here.","title":"Brief Demo"},{"location":"#what-is-covered","text":"We generally support amd64 ( i.e. standard Intel/AMD cpus) for the Ubuntu LTS release and the predecessor release. We use 'r-release' just like CRAN. So currently the 'focal' 20.04 LTS and 'jammy' 22.04 LTS releases are fully supported. Support for other cpu architectures is certainly possible but somewhat unlikely due to a lack of (additional hardware) resources and time. Support for other distributions is possible but unlikely right now (due to a lack of resources and time). We hope to cover Debian at some point. Current versions are R 4.2.2, and BioConductor release 3.16 packages are provided when required by CRAN packages.","title":"What is Covered ?"},{"location":"#what-is-selected","text":"Everything :) Initially, we started from cran-logs by picking the N most-downloaded packages, along with their dependencies from BioConductor. (It should be noted that for example the first 100 packages already account for approximately half the total downloads: it is a very skewed distribution.) We iterated, and fairly soon arrived of full coverage of CRAN. So we now cover all CRAN packages (modulo at best handful of blacklisted ones) including all packages needing compilation all BioConductor package that are implied by these (and build for us). This currently resuls in 20410 and 20308 binary packages from CRAN in \"focal\" and \"jammy\", respectively, and 249 and 245 BioConductor packages, respectively, from the 3.16 release. The sole exception are a two packages we cannot build (as we do not have the required commercial software it accessess) plus less than a handful of 'odd builds' that fail and are skipped.","title":"What is Selected ?"},{"location":"#what-is-it-based-on","text":"For the CRAN binaries we either repackage RSPM builds (where available) or build natively. All selected BioConductor 3.16 packages are built natively. For all of these, full dependency resolution and integration with the system is a key feature. Everything is provided as .deb binary files with proper dependency resolution by using a proper apt repo which also has a signed Release file.","title":"What is it Based On?"},{"location":"#usage-and-setup","text":"(Note that you could use this script add_cranapt_focal.sh or the variant for jammy to facilitate the setup but you may prefer to execute the steps outlined here by hand.) First add the repository key so that apt knows it (this is optional but recommended) apt install --yes --no-install-recommends wget # to add the key wget -q -O- https://eddelbuettel.github.io/r2u/assets/dirk_eddelbuettel_key.asc \\ | tee -a /etc/apt/trusted.gpg.d/cranapt_key.asc Second, add the repository to the apt registry. You can use the original host echo \"deb [arch=amd64] https://dirk.eddelbuettel.com/cranapt focal main\" \\ > /etc/apt/sources.list.d/cranapt.list apt update or use the mirror at the University of Illinois Urbana-Champaign : echo \"deb [arch=amd64] https://r2u.stat.illinois.edu/ubuntu focal main\" \\ > /etc/apt/sources.list.d/cranapt.list apt update (In either example, replace focal with jammy for use with Ubuntu 22.04.) Third, and optionally, if you do not yet have the current R version, run these two lines (or use the standard CRAN repo setup ) wget -q -O- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc \\ | tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc echo \"deb [arch=amd64] https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/\" \\ > /etc/apt/sources.list.d/cran-ubuntu.list (Again, replace focal with jammy for use with Ubuntu 22.04.) Fourth, add repository 'pinning' as apt might get confused by some older packages (in the Ubuntu distro) which accidentally appear with a higher version number. See the next section to ensure 'CRANapt' sorts highest. After that the package are known (under their r-cran-* and r-bioc-* names). You can install them on the command-line using apt and apt-get , via aptitude as well as other front-ends. Fifth, and also optional, install and enable the bspm package so that CRANapt and other packages become available via install.packages() and update.packages() . Note that you may need to install it directly from source via sudo Rscript -e 'install.packages(\"bspm\")' to ensure it integrates correctly with the packaging system. You should also install Python components used internally by bspm via the sudo apt-get install python3-{dbus,gi,apt} command.","title":"Usage and Setup"},{"location":"#pinning","text":"Because we let apt (and related tools) pick the packages, we have to ensure that the CRANapt repo sorts higher than the default repo as (older) package builds in the distribution itself may appear (to apt ) to be newer. A case in point was package gtable whose version in Ubuntu was 0.3.0+dfsg-1 which accidentally sorts higher than the rebuild we made under a newer and more consistent version number 0.3.0-1.ca2004.1 . One possible fix is 'apt pinning'. Place a file /etc/apt/preferences.d/99cranapt with content Package: * Pin: release o=CRAN-Apt Project Pin: release l=CRAN-Apt Packages Pin-Priority: 700 which will now give packages from this repo a higher default priority of 700 overriding the standard value of 500.","title":"Pinning"},{"location":"#docker","text":"There are also two Docker containers for Ubuntu 20.04 'focal' and 22.04 'jammy', respectively, at eddelbuettel/r2u that have the above, including pinning and bspm support, already set up. Note that with recent builds of Docker (and possibly related to Ubuntu hosts) you may have to add the --security-opt seccomp=unconfined option to your Docker invocation to take advantage of bspm and the full system integration inside the container. This is also documented in the FAQ . We also found that when building containers based off the r2u containers, we could not rely on the nice bspm integration as it requires superuser rights to pass off commands from install.packages() to apt . You can still use r2u containers as a base, but sadly have to turn off bspm and use just apt commands to install packages.","title":"Docker"},{"location":"#try-it","text":"Use this link below (after possibly signing up for gitpod.io first) and run one of the three example scripts , or just start R in the terminal window. The gif below display running one such example to install brms from binaries in a few seconds. Using this requires only (free) GitHub and GitPod accounts.","title":"Try It"},{"location":"#support","text":"Please file issues at the GitHub issues for r2u .","title":"Support"},{"location":"#known-issues","text":"The littler package reflects build-time configuration, the RSPM binary is then expecting a different R location so it needs a binary rebuild. Added a 'force' flag, may need a list similar to the blacklist to always compiled. A small number of packages do not build for lack required components; examples are ROracle and Rcplex. They, and their reverse dependencies, are are blacklisted and not built. r2u is an apt repo, which via bspm becomes used \"automagically\" via standard R calls of install.packages() and alike. That last part is important: package installations that do not use install.packages() (such as renv , rig , ...) do not benefit from install.packages() calling apt for you, and cannot take advantage of r2u via bspm . bspm traces calls to install.packages() and maps them system-wide installation via apt . By choice, it does not map the remove.packages() for package removal, see this issue for more discussion. Packages can be uninstalled via the system package manager using, respectively, apt , dpkg or one of graphical frontends as well as via the R function bspm::remove_sys() .","title":"Known Issues"},{"location":"#author","text":"Dirk Eddelbuettel","title":"Author"},{"location":"#license","text":"The repository-building code in this package is released under the GPL (>= 2). All CRAN and BioConductor packages are released under their respective licenses.","title":"License"},{"location":"#acknowledgment","text":"This was made possible by the generous support of endless coffee thanks to my GitHub Sponsors .","title":"Acknowledgment"},{"location":"changelog/","text":"2022 2022-12-25 Dirk Eddelbuettel edd@debian.org * docs/mkdmt-src/src/vignettes/FAQ.md: Mention that non-LTS releases can use the LTS repos just fine. 2022-11-19 Dirk Eddelbuettel edd@debian.org * inst/NEWS.Rd: Make release 0.0.4 with BioConductor 3.16 2022-09-18 Dirk Eddelbuettel edd@debian.org * README.md: Mention that Docker build cannot use bspm as the security setting used at run-time is not available during build time * inst/docs/FAQ.md: Idem 2022-09-16 Dirk Eddelbuettel edd@debian.org * README.md: Mention the new mirror r2u.stat.illinois.edu * inst/scripts/add_cranapt_focal.sh: Use r2u.stat.illinois.edu * inst/scripts/add_cranapt_jammy.sh: Idem * docker/focal/run/cranapt.list: Idem * docker/jammy/run/cranapt.list: Idem 2022-09-14 John Blischak jdblischak@gmail.com * inst/scripts/add_cranapt_jammy.sh: Add missing 'apt update' 2022-09-11 Dirk Eddelbuettel edd@debian.org * README.md: Update to state 'current R' via CRAN apt repo * inst/scripts/add_cranapt_focal.sh: Idem * inst/scripts/add_cranapt_jammy.sh: Idem 2022-09-08 Dirk Eddelbuettel edd@debian.org * README.md: Update package number 2022-08-01 Dirk Eddelbuettel edd@debian.org * inst/dockerize/Dockerfile: Add 'dockerize' example * inst/dockerize/README.md: Short description 2022-07-12 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R (.addDepends): Special-case 'rJava' which does not resolve its shared library given that Java libs are hidden 2022-07-07 Dirk Eddelbuettel edd@debian.org * R/init.R (.loadDB, .loadAP): Make cache age a function parameter 2022-06-18 Dirk Eddelbuettel edd@debian.org * README.md (Pinning): Refined setup with origin and label * inst/scripts/add_cranapt_{focal,jammy}.sh: Idem * docker/{focal,jammy}/{build,run}: Idem 2022-06-17 Dirk Eddelbuettel edd@debian.org * R/package.R (buildPackage): Correct nlme and foreign download 2022-06-08 Dirk Eddelbuettel edd@debian.org * inst/docs/FAQ.md: Add entry on Singularity 2022-06-06 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Accomodate sp with epoch * README.md: Edits 2022-06-02 Dirk Eddelbuettel edd@debian.org * R/package.R: Accomodate dash-to-dot in nlme and foreign versions 2022-06-01 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Accomodate dash-to-dot in foreign version 2022-05-31 Dirk Eddelbuettel edd@debian.org * inst/docs/FAQ.md: Draft of two new entries 2022-05-29 Dirk Eddelbuettel edd@debian.org * R/package.R: Correct two invisible calls * R/controlFiles.R: Accomodate dash-to-dot in nlme version 2022-05-28 Sergio Oller sergioller@gmail.com * README.md: Add missing double-quote in example 2022-05-25 Dirk Eddelbuettel edd@debian.org * R/package.R: Support per-distribution blacklist * R/init.R: Idem * docker/focal/run/Dockerfile: Note '--security-opt seccomp=unconfined' needed for bspm use 2022-05-22 Dirk Eddelbuettel edd@debian.org * README.md: Reword headline 2022-05-21 Dirk Eddelbuettel edd@debian.org * inst/scripts/add_cranapt_focal.sh: Use CRAN repo for R * README.md: Ditto 2022-05-20 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Reflect repo in Description: 2022-05-17 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Build and cache in per distro dir * R/package.R: Ditto * docker/*/build/debBuild.sh: Add dist argument * README.md: Update package numbers 2022-05-15 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Correct base package list * R/init.R: Filter commented lines from blacklist * R/package.R: New helper to identify updated packages 2022-05-13 Dirk Eddelbuettel edd@debian.org * R/package.R: New top-level function to build updated packages * R/init.R: Support * man/buildPackage.Rd: Docs * README.md: Update package numbers 2022-05-11 Dirk Eddelbuettel edd@debian.org * README.md: Switch instruction to downloading keys and storing in /etc/apt/trusted.gpg.d/ which is now preferred, additional edits 2022-05-09 Dirk Eddelbuettel edd@debian.org * inst/scripts/add_cranapt_jammy.sh: Update key use * R/init.R: Correct a cached=file time comparison 2022-05-08 Dirk Eddelbuettel edd@debian.org * R/package.R: Add nDeps * docker/jammy/run/Dockerfile: Use asc key file * .gitpod.Dockerfile: Switch to 22.04 2022-05-07 Dirk Eddelbuettel edd@debian.org * README.md: Updated docs * docs/*: Idem * docker/jammy/build/*: Use http instead of mount for pinning * docker/jammy/build/debBuild.sh: Call dpkg-buildpackage with -b * inst/scripts/add_cranapt_focal.sh: Renamed from add_cranapt.sh * inst/scripts/add_cranapt_jammy.sh: Added 2022-05-06 Dirk Eddelbuettel edd@debian.org * R/package.R: Support building for multiple LTS releases * R/init.R: Idem, skip test for R >= 4.0, two-tiered depends * DESCRIPTION: Depend on R >= 4.0 2022-05-04 Dirk Eddelbuettel edd@debian.org * R/package.R: Simpler interface * inst/examples/add_cranapt.sh: Renamed from setup_r2u.sh * README.md: Documentation updates 2022-05-03 Dirk Eddelbuettel edd@debian.org * Initial version","title":"Changelog"},{"location":"changelog/#2022","text":"2022-12-25 Dirk Eddelbuettel edd@debian.org * docs/mkdmt-src/src/vignettes/FAQ.md: Mention that non-LTS releases can use the LTS repos just fine. 2022-11-19 Dirk Eddelbuettel edd@debian.org * inst/NEWS.Rd: Make release 0.0.4 with BioConductor 3.16 2022-09-18 Dirk Eddelbuettel edd@debian.org * README.md: Mention that Docker build cannot use bspm as the security setting used at run-time is not available during build time * inst/docs/FAQ.md: Idem 2022-09-16 Dirk Eddelbuettel edd@debian.org * README.md: Mention the new mirror r2u.stat.illinois.edu * inst/scripts/add_cranapt_focal.sh: Use r2u.stat.illinois.edu * inst/scripts/add_cranapt_jammy.sh: Idem * docker/focal/run/cranapt.list: Idem * docker/jammy/run/cranapt.list: Idem 2022-09-14 John Blischak jdblischak@gmail.com * inst/scripts/add_cranapt_jammy.sh: Add missing 'apt update' 2022-09-11 Dirk Eddelbuettel edd@debian.org * README.md: Update to state 'current R' via CRAN apt repo * inst/scripts/add_cranapt_focal.sh: Idem * inst/scripts/add_cranapt_jammy.sh: Idem 2022-09-08 Dirk Eddelbuettel edd@debian.org * README.md: Update package number 2022-08-01 Dirk Eddelbuettel edd@debian.org * inst/dockerize/Dockerfile: Add 'dockerize' example * inst/dockerize/README.md: Short description 2022-07-12 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R (.addDepends): Special-case 'rJava' which does not resolve its shared library given that Java libs are hidden 2022-07-07 Dirk Eddelbuettel edd@debian.org * R/init.R (.loadDB, .loadAP): Make cache age a function parameter 2022-06-18 Dirk Eddelbuettel edd@debian.org * README.md (Pinning): Refined setup with origin and label * inst/scripts/add_cranapt_{focal,jammy}.sh: Idem * docker/{focal,jammy}/{build,run}: Idem 2022-06-17 Dirk Eddelbuettel edd@debian.org * R/package.R (buildPackage): Correct nlme and foreign download 2022-06-08 Dirk Eddelbuettel edd@debian.org * inst/docs/FAQ.md: Add entry on Singularity 2022-06-06 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Accomodate sp with epoch * README.md: Edits 2022-06-02 Dirk Eddelbuettel edd@debian.org * R/package.R: Accomodate dash-to-dot in nlme and foreign versions 2022-06-01 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Accomodate dash-to-dot in foreign version 2022-05-31 Dirk Eddelbuettel edd@debian.org * inst/docs/FAQ.md: Draft of two new entries 2022-05-29 Dirk Eddelbuettel edd@debian.org * R/package.R: Correct two invisible calls * R/controlFiles.R: Accomodate dash-to-dot in nlme version 2022-05-28 Sergio Oller sergioller@gmail.com * README.md: Add missing double-quote in example 2022-05-25 Dirk Eddelbuettel edd@debian.org * R/package.R: Support per-distribution blacklist * R/init.R: Idem * docker/focal/run/Dockerfile: Note '--security-opt seccomp=unconfined' needed for bspm use 2022-05-22 Dirk Eddelbuettel edd@debian.org * README.md: Reword headline 2022-05-21 Dirk Eddelbuettel edd@debian.org * inst/scripts/add_cranapt_focal.sh: Use CRAN repo for R * README.md: Ditto 2022-05-20 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Reflect repo in Description: 2022-05-17 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Build and cache in per distro dir * R/package.R: Ditto * docker/*/build/debBuild.sh: Add dist argument * README.md: Update package numbers 2022-05-15 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Correct base package list * R/init.R: Filter commented lines from blacklist * R/package.R: New helper to identify updated packages 2022-05-13 Dirk Eddelbuettel edd@debian.org * R/package.R: New top-level function to build updated packages * R/init.R: Support * man/buildPackage.Rd: Docs * README.md: Update package numbers 2022-05-11 Dirk Eddelbuettel edd@debian.org * README.md: Switch instruction to downloading keys and storing in /etc/apt/trusted.gpg.d/ which is now preferred, additional edits 2022-05-09 Dirk Eddelbuettel edd@debian.org * inst/scripts/add_cranapt_jammy.sh: Update key use * R/init.R: Correct a cached=file time comparison 2022-05-08 Dirk Eddelbuettel edd@debian.org * R/package.R: Add nDeps * docker/jammy/run/Dockerfile: Use asc key file * .gitpod.Dockerfile: Switch to 22.04 2022-05-07 Dirk Eddelbuettel edd@debian.org * README.md: Updated docs * docs/*: Idem * docker/jammy/build/*: Use http instead of mount for pinning * docker/jammy/build/debBuild.sh: Call dpkg-buildpackage with -b * inst/scripts/add_cranapt_focal.sh: Renamed from add_cranapt.sh * inst/scripts/add_cranapt_jammy.sh: Added 2022-05-06 Dirk Eddelbuettel edd@debian.org * R/package.R: Support building for multiple LTS releases * R/init.R: Idem, skip test for R >= 4.0, two-tiered depends * DESCRIPTION: Depend on R >= 4.0 2022-05-04 Dirk Eddelbuettel edd@debian.org * R/package.R: Simpler interface * inst/examples/add_cranapt.sh: Renamed from setup_r2u.sh * README.md: Documentation updates 2022-05-03 Dirk Eddelbuettel edd@debian.org * Initial version","title":"2022"},{"location":"news/","text":"Version 0.0.4 (2022-11-19) Switch to BioConductor 3.16 and rebuild all r-bioc-* packages Version 0.0.3 (2022-09-16) Announce mirror r2u.stat.illinois.edu and use in scripts Version 0.0.2 (2022-05-08) New release with Ubuntu 22.04 support Version 0.0.1 (2022-05-04) Initial release for Ubuntu 20.04","title":"News"},{"location":"man/buildPackage/","text":"Build a Package Description Builds a package considering the repository information, dependencies and already built packages. Usage buildPackage(pkg, tgt, debug = FALSE, verbose = FALSE, force = FALSE, xvfb = FALSE, suffix = \".1\") buildAll(pkg, tgt, debug = FALSE, verbose = FALSE, force = FALSE, xvfb = FALSE) topN(npkg, date = Sys.Date() - 1, from = 1L) topNCompiled(npkg, date = Sys.Date() - 1, from = 1L) nDeps(ndeps) buildUpdatedPackages(tgt, debug = FALSE, verbose = FALSE, force = FALSE, xvfb = FALSE) Arguments pkg character Name of the CRAN or BioConductor package to build tgt character Name (or version) of the build target distribution, this is restricted to either \u201c20.04\u201d or \u201c22.04\u201d (or their names \u201cfocal\u201d or \u201cjammy\u201d) debug logical Optional value to show more debugging output, default is \u2018FALSE\u2019 verbose logical Optional value show more verbose progress output, default is \u2018FALSE\u2019 force logical Optional value to force package build from source, default is \u2018FALSE\u2019 xvfb logical Optional value to build under xvfb-run , default is \u2018FALSE\u2019 suffix character Optional value to override default package version suffix of \u2018.1\u2019 npkg integer Number of packages to build date Date Relevant date for cranlog download stats from integer Optional applied as offset to npkg to shift the selection ndeps integer Optional value for selected build-dependency count build via nDeps Details The buildPackage function builds the given package. The buildAll package applies to all elements in the supplied vector of packages. The topN and topNCompiled helpers select \u2018N\u2019 among all (or all compiled) packages. The nDeps function builds packages with a given (adjusted) build-dependency count. The updatedPackages function finds a set of available packages that are not yet built. Note that this build process is still somewhat tailored to the build setup use by the author and is not (yet ?) meant to be universally transferable. It should be with a little care and possible examination of the code. If interested, please get in touch. Value Nothing as the function is invoked for the side effect of building binary packages Author(s) Dirk Eddelbuettel","title":"buildPackage"},{"location":"man/buildPackage/#build-a-package","text":"","title":"Build a Package"},{"location":"man/buildPackage/#description","text":"Builds a package considering the repository information, dependencies and already built packages.","title":"Description"},{"location":"man/buildPackage/#usage","text":"buildPackage(pkg, tgt, debug = FALSE, verbose = FALSE, force = FALSE, xvfb = FALSE, suffix = \".1\") buildAll(pkg, tgt, debug = FALSE, verbose = FALSE, force = FALSE, xvfb = FALSE) topN(npkg, date = Sys.Date() - 1, from = 1L) topNCompiled(npkg, date = Sys.Date() - 1, from = 1L) nDeps(ndeps) buildUpdatedPackages(tgt, debug = FALSE, verbose = FALSE, force = FALSE, xvfb = FALSE)","title":"Usage"},{"location":"man/buildPackage/#arguments","text":"pkg character Name of the CRAN or BioConductor package to build tgt character Name (or version) of the build target distribution, this is restricted to either \u201c20.04\u201d or \u201c22.04\u201d (or their names \u201cfocal\u201d or \u201cjammy\u201d) debug logical Optional value to show more debugging output, default is \u2018FALSE\u2019 verbose logical Optional value show more verbose progress output, default is \u2018FALSE\u2019 force logical Optional value to force package build from source, default is \u2018FALSE\u2019 xvfb logical Optional value to build under xvfb-run , default is \u2018FALSE\u2019 suffix character Optional value to override default package version suffix of \u2018.1\u2019 npkg integer Number of packages to build date Date Relevant date for cranlog download stats from integer Optional applied as offset to npkg to shift the selection ndeps integer Optional value for selected build-dependency count build via nDeps","title":"Arguments"},{"location":"man/buildPackage/#details","text":"The buildPackage function builds the given package. The buildAll package applies to all elements in the supplied vector of packages. The topN and topNCompiled helpers select \u2018N\u2019 among all (or all compiled) packages. The nDeps function builds packages with a given (adjusted) build-dependency count. The updatedPackages function finds a set of available packages that are not yet built. Note that this build process is still somewhat tailored to the build setup use by the author and is not (yet ?) meant to be universally transferable. It should be with a little care and possible examination of the code. If interested, please get in touch.","title":"Details"},{"location":"man/buildPackage/#value","text":"Nothing as the function is invoked for the side effect of building binary packages","title":"Value"},{"location":"man/buildPackage/#authors","text":"Dirk Eddelbuettel","title":"Author(s)"},{"location":"man/r2u-package/","text":"Turn RSPM Binary Packages into Ubuntu Packages Description RSPM binary packages are turned into Ubuntu packages containing proper system dependency information. Package Content Index: This package was not yet installed at build time. Maintainer Dirk Eddelbuettel \\<edd@debian.org> Author(s) Dirk Eddelbuettel","title":"R2u package"},{"location":"man/r2u-package/#turn-rspm-binary-packages-into-ubuntu-packages","text":"","title":"Turn RSPM Binary Packages into Ubuntu Packages"},{"location":"man/r2u-package/#description","text":"RSPM binary packages are turned into Ubuntu packages containing proper system dependency information.","title":"Description"},{"location":"man/r2u-package/#package-content","text":"Index: This package was not yet installed at build time.","title":"Package Content"},{"location":"man/r2u-package/#maintainer","text":"Dirk Eddelbuettel \\<edd@debian.org>","title":"Maintainer"},{"location":"man/r2u-package/#authors","text":"Dirk Eddelbuettel","title":"Author(s)"},{"location":"vignettes/FAQ/","text":"General Why is it called both CRANapt and r2u? We hope to eventually provide CRAN binaries for multiple distributions (Debian, Ubuntu, ...), releases (testing/stable, LTS/current, ...), hardware platforms, and so on. But we had to start somewhere, so Ubuntu LTS for amd64 is the first instance. And as we are effectively only on Ubuntu for now, the shorter 'r2u' crept up, and stuck. How is it pronounced? We think of the 'n' as silent so you can always say \"oh I just crapted these packages onto my system\". A package reports it is uninstallable Make sure you follow the 'Pinnning' section of the README.md and the setup script . Some (older) builds in the (main) Ubuntu distribution appear to sort higher and would block an installation of the freshly made binary (under a consistent naming scheme). The apt feature of 'pinning' is what we want here to have an entire repository sort higher. There can also be other issues related to CRAN allowing a hyphen in version ( e.g. nlme is currently at 3.1-157. But Debian and Ubuntu use a hyphen to split off the build iteration count so version numbers are sometimes standardised to for example 3.1.157 switching the hyphen to a dot. Sadly that leads to different sorting. (See issue #7 for more on an issue that was caused by this.) In general we can not overcome this by pinning, and we continue to try to find a more comprehensive solution that is less invasive than changing many package version numbers. What is the relationship with the c2d4u PPA ? We are huge fans of the c2d4u repository and have used it for a decade or longer. It uses the proper build process, and sits on a very solid Launchpad infrastructure supported by Canonical. However, this also makes it a little less nimble and precludes for example use of external build resources. Overall it also still at a fraction of CRAN packages. So we created this repo as an experiment to see if we could scale a simple and direct approach, and in the hopes it can complement the c2d4u PPA and offer additional packages Can I use (current) r2u with Debian? In general, it is not a good idea to mix packages from Debian and Ubuntu in the same installation. The package management system works so well for either because it generally can rely on proper package versions, dependencies, and relationships between packages. Mixing, while it may work in small isolated cases, is really not suitable to such setups. So we recommend against using (the current r2u setup which is Ubuntu-only) on Debian. (This question was also asked in issue #8 .) Can I install Bioconductor packages from Ubuntu not in r2u Ubuntu contains a number of Debian packages r-bioc-* . However, the distribution cutoff for the 'jammy' (22.04) cutoff was before Bioconductor 3.15 was released so these packages have a dependency on the 'r-api-bioc-3.14' (virtual) package. To satisfy this with our r2u packages, which are based on the newer Bioconductor 3.15, we added a small virtual package bioc-api-package that we added to the repo. So after sudo apt install bioc-api-package installation of the addional Bioconductor packages in jammy can proceed. For more details see issue #11 . Can I use it with other non-LTS Ubuntu releases? Of course! You can always forward-upgrade. So for example the 22.04 (\"jammy\") release works perfectly fine with 22.10 (\"kinetic\"). Just make sure you keep the sources.list entry on the LTS release you have as we (just like many other repositories) only provide LTS releases and no interim releases. bspm Should I install bspm? We find it helpful. It allows you to use install.packages() in R, or script install.r , and refer to CRAN and BioConductor packages by their names which is more natural. bspm will call apt for you. Hence our default Docker image has bspm installed and enabled by default. (Also see below though for docker build and bspm .) bspm is a little noisy You can wrap suppressMessages() around bspm::enable() . We now do so in the Docker image. 'Cannot connect' errors With the 22.04 \"jammy\" container I get errors We found that adding --security-opt seccomp=unconfined to the docker invocation silenced those on AWS hosts and possibly other systems. This may be related to Ubuntu hosts only. A side-effect of this required security policy statement for bspm is that bspm is not available when building containers off r2u . It appears that Docker rules this out during builds. The only remedy is to use bspm::disable() and to rely on just apt to install the r2u packages in derived containers. Can one use r2u with Singularity containers? Yes, as discussed in this GitHub issue . The key is that Singularity does not allow root access, yet we need to install packages via bspm . The best answer is this to start from the base container, add packages as needed to create a new Docker container -- and transfer / transform that container for Singularity use. The running example in that issue is installing Seurat and moderately complex and extended dependencies. Thanks to how r2u is set up a simpler Dockerfile such as FROM eddelbuettel/r2u:22.04 RUN install.r Seurat which by using install.r (from littler along with bspm turns this into a call to apt . Call as, say, docker build -t r2u_seurat:22.04 . and enjoy the resulting container r2u_seurat:22.04 (or give it any other suitable name) and build a suitable .sif from it as discussed in the issue. How can one know when it was updated We follow RSPM builds so their update tracker there can be helpful. We currently have no 'lastBuilt' tag on the website but could add one if that helped.","title":"FAQ"},{"location":"vignettes/FAQ/#general","text":"","title":"General"},{"location":"vignettes/FAQ/#why-is-it-called-both-cranapt-and-r2u","text":"We hope to eventually provide CRAN binaries for multiple distributions (Debian, Ubuntu, ...), releases (testing/stable, LTS/current, ...), hardware platforms, and so on. But we had to start somewhere, so Ubuntu LTS for amd64 is the first instance. And as we are effectively only on Ubuntu for now, the shorter 'r2u' crept up, and stuck.","title":"Why is it called both CRANapt and r2u?"},{"location":"vignettes/FAQ/#how-is-it-pronounced","text":"We think of the 'n' as silent so you can always say \"oh I just crapted these packages onto my system\".","title":"How is it pronounced?"},{"location":"vignettes/FAQ/#a-package-reports-it-is-uninstallable","text":"Make sure you follow the 'Pinnning' section of the README.md and the setup script . Some (older) builds in the (main) Ubuntu distribution appear to sort higher and would block an installation of the freshly made binary (under a consistent naming scheme). The apt feature of 'pinning' is what we want here to have an entire repository sort higher. There can also be other issues related to CRAN allowing a hyphen in version ( e.g. nlme is currently at 3.1-157. But Debian and Ubuntu use a hyphen to split off the build iteration count so version numbers are sometimes standardised to for example 3.1.157 switching the hyphen to a dot. Sadly that leads to different sorting. (See issue #7 for more on an issue that was caused by this.) In general we can not overcome this by pinning, and we continue to try to find a more comprehensive solution that is less invasive than changing many package version numbers.","title":"A package reports it is uninstallable"},{"location":"vignettes/FAQ/#what-is-the-relationship-with-the-c2d4u-ppa","text":"We are huge fans of the c2d4u repository and have used it for a decade or longer. It uses the proper build process, and sits on a very solid Launchpad infrastructure supported by Canonical. However, this also makes it a little less nimble and precludes for example use of external build resources. Overall it also still at a fraction of CRAN packages. So we created this repo as an experiment to see if we could scale a simple and direct approach, and in the hopes it can complement the c2d4u PPA and offer additional packages","title":"What is the relationship with the c2d4u PPA ?"},{"location":"vignettes/FAQ/#can-i-use-current-r2u-with-debian","text":"In general, it is not a good idea to mix packages from Debian and Ubuntu in the same installation. The package management system works so well for either because it generally can rely on proper package versions, dependencies, and relationships between packages. Mixing, while it may work in small isolated cases, is really not suitable to such setups. So we recommend against using (the current r2u setup which is Ubuntu-only) on Debian. (This question was also asked in issue #8 .)","title":"Can I use (current) r2u with Debian?"},{"location":"vignettes/FAQ/#can-i-install-bioconductor-packages-from-ubuntu-not-in-r2u","text":"Ubuntu contains a number of Debian packages r-bioc-* . However, the distribution cutoff for the 'jammy' (22.04) cutoff was before Bioconductor 3.15 was released so these packages have a dependency on the 'r-api-bioc-3.14' (virtual) package. To satisfy this with our r2u packages, which are based on the newer Bioconductor 3.15, we added a small virtual package bioc-api-package that we added to the repo. So after sudo apt install bioc-api-package installation of the addional Bioconductor packages in jammy can proceed. For more details see issue #11 .","title":"Can I install Bioconductor packages from Ubuntu not in r2u"},{"location":"vignettes/FAQ/#can-i-use-it-with-other-non-lts-ubuntu-releases","text":"Of course! You can always forward-upgrade. So for example the 22.04 (\"jammy\") release works perfectly fine with 22.10 (\"kinetic\"). Just make sure you keep the sources.list entry on the LTS release you have as we (just like many other repositories) only provide LTS releases and no interim releases.","title":"Can I use it with other non-LTS Ubuntu releases?"},{"location":"vignettes/FAQ/#bspm","text":"","title":"bspm"},{"location":"vignettes/FAQ/#should-i-install-bspm","text":"We find it helpful. It allows you to use install.packages() in R, or script install.r , and refer to CRAN and BioConductor packages by their names which is more natural. bspm will call apt for you. Hence our default Docker image has bspm installed and enabled by default. (Also see below though for docker build and bspm .)","title":"Should I install bspm?"},{"location":"vignettes/FAQ/#bspm-is-a-little-noisy","text":"You can wrap suppressMessages() around bspm::enable() . We now do so in the Docker image.","title":"bspm is a little noisy"},{"location":"vignettes/FAQ/#cannot-connect-errors","text":"","title":"'Cannot connect' errors"},{"location":"vignettes/FAQ/#with-the-2204-jammy-container-i-get-errors","text":"We found that adding --security-opt seccomp=unconfined to the docker invocation silenced those on AWS hosts and possibly other systems. This may be related to Ubuntu hosts only. A side-effect of this required security policy statement for bspm is that bspm is not available when building containers off r2u . It appears that Docker rules this out during builds. The only remedy is to use bspm::disable() and to rely on just apt to install the r2u packages in derived containers.","title":"With the 22.04 \"jammy\" container I get errors"},{"location":"vignettes/FAQ/#can-one-use-r2u-with-singularity-containers","text":"Yes, as discussed in this GitHub issue . The key is that Singularity does not allow root access, yet we need to install packages via bspm . The best answer is this to start from the base container, add packages as needed to create a new Docker container -- and transfer / transform that container for Singularity use. The running example in that issue is installing Seurat and moderately complex and extended dependencies. Thanks to how r2u is set up a simpler Dockerfile such as FROM eddelbuettel/r2u:22.04 RUN install.r Seurat which by using install.r (from littler along with bspm turns this into a call to apt . Call as, say, docker build -t r2u_seurat:22.04 . and enjoy the resulting container r2u_seurat:22.04 (or give it any other suitable name) and build a suitable .sif from it as discussed in the issue.","title":"Can one use r2u with Singularity containers?"},{"location":"vignettes/FAQ/#how-can-one-know-when-it-was-updated","text":"We follow RSPM builds so their update tracker there can be helpful. We currently have no 'lastBuilt' tag on the website but could add one if that helped.","title":"How can one know when it was updated"},{"location":"vignettes/Notes/","text":"jammy builds sp: The upstream package r-cran-sp has an epoch in its version number blocking pinning so a one-off build with an epoch added to this version was made gastemp: The suggested package rstantools appears to be a build dependency so as a one-off it was added","title":"Notes"},{"location":"vignettes/Notes/#jammy-builds","text":"sp: The upstream package r-cran-sp has an epoch in its version number blocking pinning so a one-off build with an epoch added to this version was made gastemp: The suggested package rstantools appears to be a build dependency so as a one-off it was added","title":"jammy builds"}]}
{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"r2u: CRAN as Ubuntu Binaries Key features Full integration with apt as every binary resolves all its dependencies: No more installations (of pre-built archives) only to discover that a shared library is missing. No more surprises. Full integration with apt so that an update of a system library cannot break an R package: if a (shared) library is used by a CRAN, the package manager knows, and will not remove it. No more (R package) breakage from (system) library updates. Simpler and lighter than some alternatives as only run-time library packages are installed as dependencies (instead of generally heavier development packages). Installations are fast, automated and reversible thanks to the package management layer. Fast and well-connected mirror at r2u.stat.illinois.edu on the Internet2 Complete coverage with (currently, using 22.04) ~ 24491 CRAN packages (and 435 from BioConductor) using current versions : We use R 4.4.*, and BioConductor 3.20. Complete support for Ubuntu 20.04 (\"focal\") , 22.04 (\"jammy\") and 24.04 (\"noble\") on amd64, as well as (initial) 24.04 (\"noble\") support on arm64. Optional (but recommended) bspm use automagically connects R functions like install.packages() to apt for access to binaries and dependencies. Docker containers rocker/r2u from the Rocker Project for both 'focal', 'jammy' and 'noble'. GitHub Actions support to set up on Ubuntu 'latest' or via container. Brief Demo The gif below shows how one install.packages(\"tidyverse\") command on an Ubuntu 20.04 system installs all packages and dependencies as binaries in 18 seconds (by passing the R package installation to apt using bspm ). This uses the Docker container referenced below, which has been set up with the five easy setup steps detailed here. What is Covered ? We generally support amd64 ( i.e. standard 64-bit Intel/AMD cpus, sometimes also called x86_64) for the current Ubuntu LTS release and its predecessor release (more on this here ). We use 'r-release' just like CRAN. So currently the 'focal' 20.04 LTS, 'jammy' 22.04 LTS and 'noble' 24.04 releases are fully supported. We are now also starting to support arm64 on 'noble' 24.04 taking advantage of arm64-based runners at GitHub Actions. Support for additional cpu architectures is certainly possible but somewhat unlikely due to a lack of (additional hardware) resources and time. Support for other distributions is possible but unlikely right now (due to a lack of resources and time). P3M/PPM/RSPM now appears to also support Debian which could be added at some later point. Current versions are based on R 4.4. , and BioConductor release 3.20 packages are provided when required by CRAN packages. Binaries are generally R 4.4. based. Some older packages released when we used R 4.2. or 4.3. may have been built with R 4.2. or R 4.3. , they will still work the same with R 4.4.* as R is generally forward-compatible. What is Selected ? Everything :) Initially, we started from cran-logs by picking the N most-downloaded packages, along with their dependencies from BioConductor. (It should be noted that for example the first 100 packages already account for approximately half the total downloads: it is a very skewed distribution.) We iterated, and fairly soon arrived of full coverage of CRAN. So we now cover all CRAN packages (modulo at best a handful of blacklisted ones) including all packages needing compilation all BioConductor packages implied by these plus a 'healthy subset' of the highest scoring BioConductor packages (also covering e.g. all BioConductor packages in the Debian and Ubuntu distributions) This currently results in 24797, 24717, 22376 binary packages from CRAN in \"focal\", \"jammy\", and \"noble\", respectively, and 429, 437, and 451 BioConductor packages, respectively, from the 3.20 releases. (See this FAQ about why this number is higher than CRAN, and variable between releases.) The sole exception are packages we cannot build (as we do not have the required commercial software it accessess, or do not have the required more recent toolchain component) plus a handful or so of 'odd builds' that fail and are skipped. What is it Based On? For the CRAN binaries we either repackage P3M/RSPM/PPM builds (where available) or build natively. All selected BioConductor packages are built natively. For all of these, full dependency resolution and integration with the system is a key feature. Everything is provided as .deb binary files with proper dependency resolution by using a proper apt repo which also has a signed Release file. Usage and Setup (Note that you could use one of the scripts add_cranapt_noble.sh (for Ubuntu 24.04), or add_cranapt_jammy.sh (for Ubuntu 22.04), or add_cranapt_focal.sh (for the older Ubuntu 20.04) to facilitate the setup. They are tested on 'empty' Ubuntu containers of the corresponding release. However, you may prefer to execute the steps outlined here by hand.) You can use lsb_release -cs to generate your release name: \"focal\", \"jammy\", and \"noble\" are supported and you could swap \"focal\" or \"noble\" in below (or use one of the scripts). Here, we show the setup step by step for 'jammy' aka Ubuntu 22.04 (as it is still the most-widely used distribution per our logs, though we may update this to 24.04 soon). You should run all these commands as root to carefully review each one. If you prefer the newer Ubuntu 24.04, please see the add_cranapt_noble.sh script which also avoids the now-deprecated apt-key command). Step 1: Update apt, install tools, fetch key First add the repository key so that apt knows it (this is optional but recommended) apt update -qq && apt install --yes --no-install-recommends wget \\ ca-certificates gnupg wget -q -O- https://eddelbuettel.github.io/r2u/assets/dirk_eddelbuettel_key.asc \\ | tee -a /etc/apt/trusted.gpg.d/cranapt_key.asc Step 2: Add the apt repo Second, add the repository to the apt registry. We recommend the well-connected main mirror provide at University of Illinois: echo \"deb [arch=amd64] https://r2u.stat.illinois.edu/ubuntu jammy main\" \\ > /etc/apt/sources.list.d/cranapt.list apt update -qq Use arch=arm64 for arm64 support (currently only available for noble). Step 3: Ensure you have current R binaries (optional) Third, and optionally, if you do not yet have the current R version, run these two lines (or use the standard CRAN repo setup ) wget -q -O- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc \\ | tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc echo \"deb [arch=amd64] https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/\" \\ > /etc/apt/sources.list.d/cran_r.list apt-key adv --keyserver keyserver.ubuntu.com --recv-keys \\ 67C2D66C4B1D4339 51716619E084DAB9 apt update -qq DEBIAN_FRONTEND=noninteractive apt install --yes --no-install-recommends \\ r-base-core Use arch=arm64 for arm64 support (currently only available for noble). Step 4: Use pinning for the r2u repo (optional) Fourth, add repository 'pinning' as apt might get confused by some older packages (in the Ubuntu distro) which accidentally appear with a higher version number. See the next section for a short discussion how it ensures 'CRANapt' sorts highest. echo \"Package: *\" > /etc/apt/preferences.d/99cranapt echo \"Pin: release o=CRAN-Apt Project\" >> /etc/apt/preferences.d/99cranapt echo \"Pin: release l=CRAN-Apt Packages\" >> /etc/apt/preferences.d/99cranapt echo \"Pin-Priority: 700\" >> /etc/apt/preferences.d/99cranapt After that the package are known (under their r-cran-* and r-bioc-* names). You can install them on the command-line using apt and apt-get , via aptitude as well as other front-ends. Step 5: Use bspm (optional) Fifth, and also optional, install and enable the bspm package so that the r2u (or CRANapt) as well as other R packages (available as r-*.deb binaries) become available via install.packages() and update.packages() . Note that you may need to install it directly from source via sudo Rscript -e 'install.packages(\"bspm\")' to ensure it integrates correctly with the packaging system. You should also install Python components used internally by bspm via the sudo apt-get install python3-{dbus,gi,apt} command. apt install --yes --no-install-recommends python3-{dbus,gi,apt} ## Then install bspm (as root) and enable it, and enable a speed optimization Rscript -e 'install.packages(\"bspm\")' RHOME=$(R RHOME) echo \"suppressMessages(bspm::enable())\" >> ${RHOME}/etc/Rprofile.site echo \"options(bspm.version.check=FALSE)\" >> ${RHOME}/etc/Rprofile.site That's it! Now try it out! About Pinning Packages can be found in different repositories, and generally the highest available version is the one we what---and apt picks it for us. Now, because we let apt (and related tools) pick the packages based on versions, we may want to ensure that the CRANapt repo sorts higher than the default repo as (older) package builds in the distribution itself may appear (to apt ) to be newer via a quirk in the sorting algorithm. A case in point was package gtable whose version in Ubuntu was 0.3.0+dfsg-1 which accidentally sorts higher than the rebuild we made under a newer and more consistent version number 0.3.0-1.ca2004.1 . For this issue, one possible and popular fix is to use 'apt pinning'. It can give 'higher weight' to packages from a particular repositor or tag. In the suggested example above, we give the r2u / cranapt repo a weight of 700 which is higher than the package default value of 500. Docker Core r2u Containers There are also Docker containers for Ubuntu 20.04 'focal', 22.04 'jammy', and 24.04 'noble', respectively. Initially published as eddelbuettel/r2u , these are now also available also as rocker/r2u . They all have the features detailed above, including pinning and bspm support, already set up. Each of the Ubuntu LTS flavors, i.e. , 'focal' and 'jammy' is also available as an identical image using the release version, i.e. , '20.04', '22.04', and '24.04', respectively. Note that with some builds of Docker (and possibly related to Ubuntu hosts) you may have to add the --security-opt seccomp=unconfined option to your Docker invocation to take advantage of bspm and the full system integration inside the container. This is also documented in the FAQ . Contributed Containers We are now starting to see derived containers: BioConductor has an (alpha release) project bioc2u providing (internal ?) BioConductor builds Jeffrey Girard created rstudio2u which adds RStudio to the base layer provided by r2u. It is encouraging to see such specialisations based off r2u itself. GitHub Actions There are two basic ways to take advantage of r2u in a GitHub Actions. The first, and simplest, is to switch to using the Docker container (see previous section). This is as simple as adding the container: statement after runs-on: in jobs: section: runs-on: ubuntu-latest container: image: rocker/r2u:22.04 A complete example is provided in this R package repo . The key advantage of this approach is that everything is already set up. A second approach consists of adding r2u as a step via the r2u-setup GitHub Action : - name: Setup r2u uses: eddelbuettel/github-actions/r2u-setup@master A complete example is provided in this repo where we use it because using the Docker container approach makes committing back via git a little harder. Try It Via codespaces See the vignette Codespaces about how to launch a 'Codespace' directly in your browser, launched from the gitrepo within minutes. This also works from your vscode installation as a remote codespace. The vignette has more details. Via gitpod.io Use this link below (after possibly signing up for gitpod.io first) and run one of the three example scripts , or just start R in the terminal window. The gif below display running one such example to install brms from binaries in a few seconds. Using this requires only (free) GitHub and GitPod accounts. Usage Statistics Usage is vibrant. As of March 2025, over 400,000 packages are shipped per week, with a total of now over thirty seven million packages shipped. Early September 2023 also had the most recent and dramatic spike of over three million packages in two days . The following chart gives a summary of cumulative and average weekly downloads (the latter one on a log scale) as of August. Support Please file issues at the GitHub issues for r2u . Frequently Asked Questions Please also see the FAQ for answers to Frequently Asked Questions . Known Issues The littler package reflects build-time configuration, the RSPM/PPM binary is then expecting a different R location so it needs a binary rebuild. Added a 'force' flag, may need a list similar to the blacklist to always compiled. A small number of packages do not build for lack required components; examples are ROracle and Rcplex. They, and their reverse dependencies, are blacklisted and not built. r2u is an apt repo, which via bspm becomes used \"automagically\" via standard R calls of install.packages() and alike. That last part is important: package installations that do not use install.packages() (such as renv , rig , ...) do not benefit from install.packages() calling apt for you, and cannot take advantage of r2u via bspm . bspm traces calls to install.packages() and maps them system-wide installation via apt . By choice, it does not map the remove.packages() for package removal, see this issue for more discussion. Packages can be uninstalled via the system package manager using, respectively, apt , dpkg or one of graphical frontends as well as via the R function bspm::remove_sys() . Author Dirk Eddelbuettel License The repository-building code in this package is released under the GPL (>= 2). All CRAN and BioConductor packages are released under their respective licenses. Acknowledgment This was made possible by the generous support of endless coffee thanks to my GitHub Sponsors .","title":"CRAN as Ubuntu Binaries"},{"location":"#r2u-cran-as-ubuntu-binaries","text":"","title":"r2u: CRAN as Ubuntu Binaries"},{"location":"#key-features","text":"Full integration with apt as every binary resolves all its dependencies: No more installations (of pre-built archives) only to discover that a shared library is missing. No more surprises. Full integration with apt so that an update of a system library cannot break an R package: if a (shared) library is used by a CRAN, the package manager knows, and will not remove it. No more (R package) breakage from (system) library updates. Simpler and lighter than some alternatives as only run-time library packages are installed as dependencies (instead of generally heavier development packages). Installations are fast, automated and reversible thanks to the package management layer. Fast and well-connected mirror at r2u.stat.illinois.edu on the Internet2 Complete coverage with (currently, using 22.04) ~ 24491 CRAN packages (and 435 from BioConductor) using current versions : We use R 4.4.*, and BioConductor 3.20. Complete support for Ubuntu 20.04 (\"focal\") , 22.04 (\"jammy\") and 24.04 (\"noble\") on amd64, as well as (initial) 24.04 (\"noble\") support on arm64. Optional (but recommended) bspm use automagically connects R functions like install.packages() to apt for access to binaries and dependencies. Docker containers rocker/r2u from the Rocker Project for both 'focal', 'jammy' and 'noble'. GitHub Actions support to set up on Ubuntu 'latest' or via container.","title":"Key features"},{"location":"#brief-demo","text":"The gif below shows how one install.packages(\"tidyverse\") command on an Ubuntu 20.04 system installs all packages and dependencies as binaries in 18 seconds (by passing the R package installation to apt using bspm ). This uses the Docker container referenced below, which has been set up with the five easy setup steps detailed here.","title":"Brief Demo"},{"location":"#what-is-covered","text":"We generally support amd64 ( i.e. standard 64-bit Intel/AMD cpus, sometimes also called x86_64) for the current Ubuntu LTS release and its predecessor release (more on this here ). We use 'r-release' just like CRAN. So currently the 'focal' 20.04 LTS, 'jammy' 22.04 LTS and 'noble' 24.04 releases are fully supported. We are now also starting to support arm64 on 'noble' 24.04 taking advantage of arm64-based runners at GitHub Actions. Support for additional cpu architectures is certainly possible but somewhat unlikely due to a lack of (additional hardware) resources and time. Support for other distributions is possible but unlikely right now (due to a lack of resources and time). P3M/PPM/RSPM now appears to also support Debian which could be added at some later point. Current versions are based on R 4.4. , and BioConductor release 3.20 packages are provided when required by CRAN packages. Binaries are generally R 4.4. based. Some older packages released when we used R 4.2. or 4.3. may have been built with R 4.2. or R 4.3. , they will still work the same with R 4.4.* as R is generally forward-compatible.","title":"What is Covered ?"},{"location":"#what-is-selected","text":"Everything :) Initially, we started from cran-logs by picking the N most-downloaded packages, along with their dependencies from BioConductor. (It should be noted that for example the first 100 packages already account for approximately half the total downloads: it is a very skewed distribution.) We iterated, and fairly soon arrived of full coverage of CRAN. So we now cover all CRAN packages (modulo at best a handful of blacklisted ones) including all packages needing compilation all BioConductor packages implied by these plus a 'healthy subset' of the highest scoring BioConductor packages (also covering e.g. all BioConductor packages in the Debian and Ubuntu distributions) This currently results in 24797, 24717, 22376 binary packages from CRAN in \"focal\", \"jammy\", and \"noble\", respectively, and 429, 437, and 451 BioConductor packages, respectively, from the 3.20 releases. (See this FAQ about why this number is higher than CRAN, and variable between releases.) The sole exception are packages we cannot build (as we do not have the required commercial software it accessess, or do not have the required more recent toolchain component) plus a handful or so of 'odd builds' that fail and are skipped.","title":"What is Selected ?"},{"location":"#what-is-it-based-on","text":"For the CRAN binaries we either repackage P3M/RSPM/PPM builds (where available) or build natively. All selected BioConductor packages are built natively. For all of these, full dependency resolution and integration with the system is a key feature. Everything is provided as .deb binary files with proper dependency resolution by using a proper apt repo which also has a signed Release file.","title":"What is it Based On?"},{"location":"#usage-and-setup","text":"(Note that you could use one of the scripts add_cranapt_noble.sh (for Ubuntu 24.04), or add_cranapt_jammy.sh (for Ubuntu 22.04), or add_cranapt_focal.sh (for the older Ubuntu 20.04) to facilitate the setup. They are tested on 'empty' Ubuntu containers of the corresponding release. However, you may prefer to execute the steps outlined here by hand.) You can use lsb_release -cs to generate your release name: \"focal\", \"jammy\", and \"noble\" are supported and you could swap \"focal\" or \"noble\" in below (or use one of the scripts). Here, we show the setup step by step for 'jammy' aka Ubuntu 22.04 (as it is still the most-widely used distribution per our logs, though we may update this to 24.04 soon). You should run all these commands as root to carefully review each one. If you prefer the newer Ubuntu 24.04, please see the add_cranapt_noble.sh script which also avoids the now-deprecated apt-key command). Step 1: Update apt, install tools, fetch key First add the repository key so that apt knows it (this is optional but recommended) apt update -qq && apt install --yes --no-install-recommends wget \\ ca-certificates gnupg wget -q -O- https://eddelbuettel.github.io/r2u/assets/dirk_eddelbuettel_key.asc \\ | tee -a /etc/apt/trusted.gpg.d/cranapt_key.asc Step 2: Add the apt repo Second, add the repository to the apt registry. We recommend the well-connected main mirror provide at University of Illinois: echo \"deb [arch=amd64] https://r2u.stat.illinois.edu/ubuntu jammy main\" \\ > /etc/apt/sources.list.d/cranapt.list apt update -qq Use arch=arm64 for arm64 support (currently only available for noble). Step 3: Ensure you have current R binaries (optional) Third, and optionally, if you do not yet have the current R version, run these two lines (or use the standard CRAN repo setup ) wget -q -O- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc \\ | tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc echo \"deb [arch=amd64] https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/\" \\ > /etc/apt/sources.list.d/cran_r.list apt-key adv --keyserver keyserver.ubuntu.com --recv-keys \\ 67C2D66C4B1D4339 51716619E084DAB9 apt update -qq DEBIAN_FRONTEND=noninteractive apt install --yes --no-install-recommends \\ r-base-core Use arch=arm64 for arm64 support (currently only available for noble). Step 4: Use pinning for the r2u repo (optional) Fourth, add repository 'pinning' as apt might get confused by some older packages (in the Ubuntu distro) which accidentally appear with a higher version number. See the next section for a short discussion how it ensures 'CRANapt' sorts highest. echo \"Package: *\" > /etc/apt/preferences.d/99cranapt echo \"Pin: release o=CRAN-Apt Project\" >> /etc/apt/preferences.d/99cranapt echo \"Pin: release l=CRAN-Apt Packages\" >> /etc/apt/preferences.d/99cranapt echo \"Pin-Priority: 700\" >> /etc/apt/preferences.d/99cranapt After that the package are known (under their r-cran-* and r-bioc-* names). You can install them on the command-line using apt and apt-get , via aptitude as well as other front-ends. Step 5: Use bspm (optional) Fifth, and also optional, install and enable the bspm package so that the r2u (or CRANapt) as well as other R packages (available as r-*.deb binaries) become available via install.packages() and update.packages() . Note that you may need to install it directly from source via sudo Rscript -e 'install.packages(\"bspm\")' to ensure it integrates correctly with the packaging system. You should also install Python components used internally by bspm via the sudo apt-get install python3-{dbus,gi,apt} command. apt install --yes --no-install-recommends python3-{dbus,gi,apt} ## Then install bspm (as root) and enable it, and enable a speed optimization Rscript -e 'install.packages(\"bspm\")' RHOME=$(R RHOME) echo \"suppressMessages(bspm::enable())\" >> ${RHOME}/etc/Rprofile.site echo \"options(bspm.version.check=FALSE)\" >> ${RHOME}/etc/Rprofile.site That's it! Now try it out!","title":"Usage and Setup"},{"location":"#about-pinning","text":"Packages can be found in different repositories, and generally the highest available version is the one we what---and apt picks it for us. Now, because we let apt (and related tools) pick the packages based on versions, we may want to ensure that the CRANapt repo sorts higher than the default repo as (older) package builds in the distribution itself may appear (to apt ) to be newer via a quirk in the sorting algorithm. A case in point was package gtable whose version in Ubuntu was 0.3.0+dfsg-1 which accidentally sorts higher than the rebuild we made under a newer and more consistent version number 0.3.0-1.ca2004.1 . For this issue, one possible and popular fix is to use 'apt pinning'. It can give 'higher weight' to packages from a particular repositor or tag. In the suggested example above, we give the r2u / cranapt repo a weight of 700 which is higher than the package default value of 500.","title":"About Pinning"},{"location":"#docker","text":"Core r2u Containers There are also Docker containers for Ubuntu 20.04 'focal', 22.04 'jammy', and 24.04 'noble', respectively. Initially published as eddelbuettel/r2u , these are now also available also as rocker/r2u . They all have the features detailed above, including pinning and bspm support, already set up. Each of the Ubuntu LTS flavors, i.e. , 'focal' and 'jammy' is also available as an identical image using the release version, i.e. , '20.04', '22.04', and '24.04', respectively. Note that with some builds of Docker (and possibly related to Ubuntu hosts) you may have to add the --security-opt seccomp=unconfined option to your Docker invocation to take advantage of bspm and the full system integration inside the container. This is also documented in the FAQ . Contributed Containers We are now starting to see derived containers: BioConductor has an (alpha release) project bioc2u providing (internal ?) BioConductor builds Jeffrey Girard created rstudio2u which adds RStudio to the base layer provided by r2u. It is encouraging to see such specialisations based off r2u itself.","title":"Docker"},{"location":"#github-actions","text":"There are two basic ways to take advantage of r2u in a GitHub Actions. The first, and simplest, is to switch to using the Docker container (see previous section). This is as simple as adding the container: statement after runs-on: in jobs: section: runs-on: ubuntu-latest container: image: rocker/r2u:22.04 A complete example is provided in this R package repo . The key advantage of this approach is that everything is already set up. A second approach consists of adding r2u as a step via the r2u-setup GitHub Action : - name: Setup r2u uses: eddelbuettel/github-actions/r2u-setup@master A complete example is provided in this repo where we use it because using the Docker container approach makes committing back via git a little harder.","title":"GitHub Actions"},{"location":"#try-it","text":"Via codespaces See the vignette Codespaces about how to launch a 'Codespace' directly in your browser, launched from the gitrepo within minutes. This also works from your vscode installation as a remote codespace. The vignette has more details. Via gitpod.io Use this link below (after possibly signing up for gitpod.io first) and run one of the three example scripts , or just start R in the terminal window. The gif below display running one such example to install brms from binaries in a few seconds. Using this requires only (free) GitHub and GitPod accounts.","title":"Try It"},{"location":"#usage-statistics","text":"Usage is vibrant. As of March 2025, over 400,000 packages are shipped per week, with a total of now over thirty seven million packages shipped. Early September 2023 also had the most recent and dramatic spike of over three million packages in two days . The following chart gives a summary of cumulative and average weekly downloads (the latter one on a log scale) as of August.","title":"Usage Statistics"},{"location":"#support","text":"Please file issues at the GitHub issues for r2u .","title":"Support"},{"location":"#frequently-asked-questions","text":"Please also see the FAQ for answers to Frequently Asked Questions .","title":"Frequently Asked Questions"},{"location":"#known-issues","text":"The littler package reflects build-time configuration, the RSPM/PPM binary is then expecting a different R location so it needs a binary rebuild. Added a 'force' flag, may need a list similar to the blacklist to always compiled. A small number of packages do not build for lack required components; examples are ROracle and Rcplex. They, and their reverse dependencies, are blacklisted and not built. r2u is an apt repo, which via bspm becomes used \"automagically\" via standard R calls of install.packages() and alike. That last part is important: package installations that do not use install.packages() (such as renv , rig , ...) do not benefit from install.packages() calling apt for you, and cannot take advantage of r2u via bspm . bspm traces calls to install.packages() and maps them system-wide installation via apt . By choice, it does not map the remove.packages() for package removal, see this issue for more discussion. Packages can be uninstalled via the system package manager using, respectively, apt , dpkg or one of graphical frontends as well as via the R function bspm::remove_sys() .","title":"Known Issues"},{"location":"#author","text":"Dirk Eddelbuettel","title":"Author"},{"location":"#license","text":"The repository-building code in this package is released under the GPL (>= 2). All CRAN and BioConductor packages are released under their respective licenses.","title":"License"},{"location":"#acknowledgment","text":"This was made possible by the generous support of endless coffee thanks to my GitHub Sponsors .","title":"Acknowledgment"},{"location":"changelog/","text":"2025 2025-02-10 Dirk Eddelbuettel edd@debian.org * R/init.R: Robustify build when no config directory present 2024 2024-11-04 Dirk Eddelbuettel edd@debian.org * README.md: Document BioConductor 3.20 support 2024-10-30 Dirk Eddelbuettel edd@debian.org * inst/scripts/add_cranapt_noble.sh: Updated to use gpg instead of apt-key (following issue #72) * README.md: Mentioned updated 'noble' aka 24.04 script too 2024-10-16 Dirk Eddelbuettel edd@debian.org * README.md: Updated usage figures and chart (from late September) 2024-09-03 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Authors@R): Added 2024-07-15 Dirk Eddelbuettel edd@debian.org * README.md: Update package counts 2024-06-01 Dirk Eddelbuettel edd@debian.org * README.md: Update usage section showing 20 million total downloads 2024-05-13 Dirk Eddelbuettel edd@debian.org * README.md: Document BioConductor 3.19 support across all three supported releases (now that 22.04 and 20.04 both caught up) 2024-05-12 Dirk Eddelbuettel edd@debian.org * README.md: Document 24.04 support * inst/scripts/add_cranapt_noble.sh: Add new 24.04 install script 2024-05-11 Dirk Eddelbuettel edd@debian.org * R/package.R (.get_source_file): Always download source file if 'force' and 'compile' are set * R/controlFiles.R (.addDepends): Refine one regular expression 2024-05-10 Dirk Eddelbuettel edd@debian.org * R/init.R: Support Ubuntu 24.04 * R/package.R: Idem * inst/scripts/add_cranapt_noble.sh: Idem * docker/noble/*: Build and run-time support for 24.04 2024-04-12 Dirk Eddelbuettel edd@debian.org * R/init.R (.loadRuntimedepends): Support run-time dependency declarations via config file * R/controlFiles.R (.addDepends): Show run-time dependencies * R/package.R (buildPackage): Source run-time dependency file 2024-03-25 Dirk Eddelbuettel edd@debian.org * README.md: Update usage numbers and charts 2024-02-23 Dirk Eddelbuettel edd@debian.org * vignettes/FAQ.md: Expanded FAQ, link FAQ from ToC 2024-02-16 Dirk Eddelbuettel edd@debian.org * R/package.R: More consistent color use 2024-02-12 Dirk Eddelbuettel edd@debian.org * R/package.R: Package version display small correction, display source repo more prominently 2024-02-11 Dirk Eddelbuettel edd@debian.org * R/package.R: Package version display tweak 2024-02-09 Dirk Eddelbuettel edd@debian.org * README.md: Update usage counts 2023 2023-12-18 Dirk Eddelbuettel edd@debian.org * README.md: Document r2u use in GitHub Actions 2023-12-12 Dirk Eddelbuettel edd@debian.org * README.md: Updated totals and count 2023-11-11 Dirk Eddelbuettel edd@debian.org * R/package.R: Add new '--compile' flag to force source build 2023-11-10 Dirk Eddelbuettel edd@debian.org * repo: Rebuilt a number of packages following Matrix update following discussion and analysis with Mikael Jagan 2023-11-05 Dirk Eddelbuettel edd@debian.org * repo: Expanded BioConductor support adding over 100 packages 2023-11-04 Dirk Eddelbuettel edd@debian.org * README.md: Mention R 4.3.2 is now the R version used and provided, update package counts from CRAN and BioConductor * repo: Rebuild of BioConductor packages for 3.18 release 2023-10-09 Dirk Eddelbuettel edd@debian.org * R/package.R (buildPackage): Support new argument 'dryrun' 2023-09-02 Dirk Eddelbuettel edd@debian.org * R/package.R: Extended to also update BioConductor packages * R/init.R: Idem 2023-08-20 Dirk Eddelbuettel edd@debian.org * README.md: Small edits and minor clarification 2023-08-16 Dirk Eddelbuettel edd@debian.org * R/init.R (.setOptions): Set timeout to 180 2023-08-15 Dirk Eddelbuettel edd@debian.org * README.md: A few edits throughout 2023-08-13 Dirk Eddelbuettel edd@debian.org * docs/*: Added new vignette on 'codespaces' 2023-08-12 Dirk Eddelbuettel edd@debian.org * .devcontainers/*: Adding documentation for Devcontainer use 2023-08-09 Dirk Eddelbuettel edd@debian.org * R/init.R (.setOptions): Set timeout to 300 2023-06-03 Dirk Eddelbuettel edd@debian.org * repo: The metadata for focal (20.04) has been adjusted so packages `sf`, `gdalraster` and `FIESTA` are now available as on 22.04 2023-05-11 Dirk Eddelbuettel edd@debian.org * .gitpod.Dockerfile: Update to rocker/r2u:jammy * .gitpod.yml (vscode): Update to REditorSupport.r@2.8.0 2023-05-09 Dirk Eddelbuettel edd@debian.org * repo: Several packages using the Graphics API of R itself have been rebuilt for R 4.3.0 and its 'soft' API change 2023-04-29 Dirk Eddelbuettel edd@debian.org * repo: Rebuild of BioConductor packages for 3.17 release 2023-04-25 Dirk Eddelbuettel edd@debian.org * README.md: Mention R 4.3.0 is now the R version used 2023-04-14 Dirk Eddelbuettel edd@debian.org * README.md: Mention rocker/r2u containers 2022 2022-12-25 Dirk Eddelbuettel edd@debian.org * docs/mkdmt-src/src/vignettes/FAQ.md: Mention that non-LTS releases can use the LTS repos just fine. 2022-11-19 Dirk Eddelbuettel edd@debian.org * inst/NEWS.Rd: Make release 0.0.4 with BioConductor 3.16 2022-09-18 Dirk Eddelbuettel edd@debian.org * README.md: Mention that Docker build cannot use bspm as the security setting used at run-time is not available during build time * inst/docs/FAQ.md: Idem 2022-09-16 Dirk Eddelbuettel edd@debian.org * README.md: Mention the new mirror r2u.stat.illinois.edu * inst/scripts/add_cranapt_focal.sh: Use r2u.stat.illinois.edu * inst/scripts/add_cranapt_jammy.sh: Idem * docker/focal/run/cranapt.list: Idem * docker/jammy/run/cranapt.list: Idem 2022-09-14 John Blischak jdblischak@gmail.com * inst/scripts/add_cranapt_jammy.sh: Add missing 'apt update' 2022-09-11 Dirk Eddelbuettel edd@debian.org * README.md: Update to state 'current R' via CRAN apt repo * inst/scripts/add_cranapt_focal.sh: Idem * inst/scripts/add_cranapt_jammy.sh: Idem 2022-09-08 Dirk Eddelbuettel edd@debian.org * README.md: Update package number 2022-08-01 Dirk Eddelbuettel edd@debian.org * inst/dockerize/Dockerfile: Add 'dockerize' example * inst/dockerize/README.md: Short description 2022-07-12 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R (.addDepends): Special-case 'rJava' which does not resolve its shared library given that Java libs are hidden 2022-07-07 Dirk Eddelbuettel edd@debian.org * R/init.R (.loadDB, .loadAP): Make cache age a function parameter 2022-06-18 Dirk Eddelbuettel edd@debian.org * README.md (Pinning): Refined setup with origin and label * inst/scripts/add_cranapt_{focal,jammy}.sh: Idem * docker/{focal,jammy}/{build,run}: Idem 2022-06-17 Dirk Eddelbuettel edd@debian.org * R/package.R (buildPackage): Correct nlme and foreign download 2022-06-08 Dirk Eddelbuettel edd@debian.org * inst/docs/FAQ.md: Add entry on Singularity 2022-06-06 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Accomodate sp with epoch * README.md: Edits 2022-06-02 Dirk Eddelbuettel edd@debian.org * R/package.R: Accomodate dash-to-dot in nlme and foreign versions 2022-06-01 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Accomodate dash-to-dot in foreign version 2022-05-31 Dirk Eddelbuettel edd@debian.org * inst/docs/FAQ.md: Draft of two new entries 2022-05-29 Dirk Eddelbuettel edd@debian.org * R/package.R: Correct two invisible calls * R/controlFiles.R: Accomodate dash-to-dot in nlme version 2022-05-28 Sergio Oller sergioller@gmail.com * README.md: Add missing double-quote in example 2022-05-25 Dirk Eddelbuettel edd@debian.org * R/package.R: Support per-distribution blacklist * R/init.R: Idem * docker/focal/run/Dockerfile: Note '--security-opt seccomp=unconfined' needed for bspm use 2022-05-22 Dirk Eddelbuettel edd@debian.org * README.md: Reword headline 2022-05-21 Dirk Eddelbuettel edd@debian.org * inst/scripts/add_cranapt_focal.sh: Use CRAN repo for R * README.md: Ditto 2022-05-20 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Reflect repo in Description: 2022-05-17 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Build and cache in per distro dir * R/package.R: Ditto * docker/*/build/debBuild.sh: Add dist argument * README.md: Update package numbers 2022-05-15 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Correct base package list * R/init.R: Filter commented lines from blacklist * R/package.R: New helper to identify updated packages 2022-05-13 Dirk Eddelbuettel edd@debian.org * R/package.R: New top-level function to build updated packages * R/init.R: Support * man/buildPackage.Rd: Docs * README.md: Update package numbers 2022-05-11 Dirk Eddelbuettel edd@debian.org * README.md: Switch instruction to downloading keys and storing in /etc/apt/trusted.gpg.d/ which is now preferred, additional edits 2022-05-09 Dirk Eddelbuettel edd@debian.org * inst/scripts/add_cranapt_jammy.sh: Update key use * R/init.R: Correct a cached=file time comparison 2022-05-08 Dirk Eddelbuettel edd@debian.org * R/package.R: Add nDeps * docker/jammy/run/Dockerfile: Use asc key file * .gitpod.Dockerfile: Switch to 22.04 2022-05-07 Dirk Eddelbuettel edd@debian.org * README.md: Updated docs * docs/*: Idem * docker/jammy/build/*: Use http instead of mount for pinning * docker/jammy/build/debBuild.sh: Call dpkg-buildpackage with -b * inst/scripts/add_cranapt_focal.sh: Renamed from add_cranapt.sh * inst/scripts/add_cranapt_jammy.sh: Added 2022-05-06 Dirk Eddelbuettel edd@debian.org * R/package.R: Support building for multiple LTS releases * R/init.R: Idem, skip test for R >= 4.0, two-tiered depends * DESCRIPTION: Depend on R >= 4.0 2022-05-04 Dirk Eddelbuettel edd@debian.org * R/package.R: Simpler interface * inst/examples/add_cranapt.sh: Renamed from setup_r2u.sh * README.md: Documentation updates 2022-05-03 Dirk Eddelbuettel edd@debian.org * Initial version","title":"Changelog"},{"location":"changelog/#2025","text":"2025-02-10 Dirk Eddelbuettel edd@debian.org * R/init.R: Robustify build when no config directory present","title":"2025"},{"location":"changelog/#2024","text":"2024-11-04 Dirk Eddelbuettel edd@debian.org * README.md: Document BioConductor 3.20 support 2024-10-30 Dirk Eddelbuettel edd@debian.org * inst/scripts/add_cranapt_noble.sh: Updated to use gpg instead of apt-key (following issue #72) * README.md: Mentioned updated 'noble' aka 24.04 script too 2024-10-16 Dirk Eddelbuettel edd@debian.org * README.md: Updated usage figures and chart (from late September) 2024-09-03 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Authors@R): Added 2024-07-15 Dirk Eddelbuettel edd@debian.org * README.md: Update package counts 2024-06-01 Dirk Eddelbuettel edd@debian.org * README.md: Update usage section showing 20 million total downloads 2024-05-13 Dirk Eddelbuettel edd@debian.org * README.md: Document BioConductor 3.19 support across all three supported releases (now that 22.04 and 20.04 both caught up) 2024-05-12 Dirk Eddelbuettel edd@debian.org * README.md: Document 24.04 support * inst/scripts/add_cranapt_noble.sh: Add new 24.04 install script 2024-05-11 Dirk Eddelbuettel edd@debian.org * R/package.R (.get_source_file): Always download source file if 'force' and 'compile' are set * R/controlFiles.R (.addDepends): Refine one regular expression 2024-05-10 Dirk Eddelbuettel edd@debian.org * R/init.R: Support Ubuntu 24.04 * R/package.R: Idem * inst/scripts/add_cranapt_noble.sh: Idem * docker/noble/*: Build and run-time support for 24.04 2024-04-12 Dirk Eddelbuettel edd@debian.org * R/init.R (.loadRuntimedepends): Support run-time dependency declarations via config file * R/controlFiles.R (.addDepends): Show run-time dependencies * R/package.R (buildPackage): Source run-time dependency file 2024-03-25 Dirk Eddelbuettel edd@debian.org * README.md: Update usage numbers and charts 2024-02-23 Dirk Eddelbuettel edd@debian.org * vignettes/FAQ.md: Expanded FAQ, link FAQ from ToC 2024-02-16 Dirk Eddelbuettel edd@debian.org * R/package.R: More consistent color use 2024-02-12 Dirk Eddelbuettel edd@debian.org * R/package.R: Package version display small correction, display source repo more prominently 2024-02-11 Dirk Eddelbuettel edd@debian.org * R/package.R: Package version display tweak 2024-02-09 Dirk Eddelbuettel edd@debian.org * README.md: Update usage counts","title":"2024"},{"location":"changelog/#2023","text":"2023-12-18 Dirk Eddelbuettel edd@debian.org * README.md: Document r2u use in GitHub Actions 2023-12-12 Dirk Eddelbuettel edd@debian.org * README.md: Updated totals and count 2023-11-11 Dirk Eddelbuettel edd@debian.org * R/package.R: Add new '--compile' flag to force source build 2023-11-10 Dirk Eddelbuettel edd@debian.org * repo: Rebuilt a number of packages following Matrix update following discussion and analysis with Mikael Jagan 2023-11-05 Dirk Eddelbuettel edd@debian.org * repo: Expanded BioConductor support adding over 100 packages 2023-11-04 Dirk Eddelbuettel edd@debian.org * README.md: Mention R 4.3.2 is now the R version used and provided, update package counts from CRAN and BioConductor * repo: Rebuild of BioConductor packages for 3.18 release 2023-10-09 Dirk Eddelbuettel edd@debian.org * R/package.R (buildPackage): Support new argument 'dryrun' 2023-09-02 Dirk Eddelbuettel edd@debian.org * R/package.R: Extended to also update BioConductor packages * R/init.R: Idem 2023-08-20 Dirk Eddelbuettel edd@debian.org * README.md: Small edits and minor clarification 2023-08-16 Dirk Eddelbuettel edd@debian.org * R/init.R (.setOptions): Set timeout to 180 2023-08-15 Dirk Eddelbuettel edd@debian.org * README.md: A few edits throughout 2023-08-13 Dirk Eddelbuettel edd@debian.org * docs/*: Added new vignette on 'codespaces' 2023-08-12 Dirk Eddelbuettel edd@debian.org * .devcontainers/*: Adding documentation for Devcontainer use 2023-08-09 Dirk Eddelbuettel edd@debian.org * R/init.R (.setOptions): Set timeout to 300 2023-06-03 Dirk Eddelbuettel edd@debian.org * repo: The metadata for focal (20.04) has been adjusted so packages `sf`, `gdalraster` and `FIESTA` are now available as on 22.04 2023-05-11 Dirk Eddelbuettel edd@debian.org * .gitpod.Dockerfile: Update to rocker/r2u:jammy * .gitpod.yml (vscode): Update to REditorSupport.r@2.8.0 2023-05-09 Dirk Eddelbuettel edd@debian.org * repo: Several packages using the Graphics API of R itself have been rebuilt for R 4.3.0 and its 'soft' API change 2023-04-29 Dirk Eddelbuettel edd@debian.org * repo: Rebuild of BioConductor packages for 3.17 release 2023-04-25 Dirk Eddelbuettel edd@debian.org * README.md: Mention R 4.3.0 is now the R version used 2023-04-14 Dirk Eddelbuettel edd@debian.org * README.md: Mention rocker/r2u containers","title":"2023"},{"location":"changelog/#2022","text":"2022-12-25 Dirk Eddelbuettel edd@debian.org * docs/mkdmt-src/src/vignettes/FAQ.md: Mention that non-LTS releases can use the LTS repos just fine. 2022-11-19 Dirk Eddelbuettel edd@debian.org * inst/NEWS.Rd: Make release 0.0.4 with BioConductor 3.16 2022-09-18 Dirk Eddelbuettel edd@debian.org * README.md: Mention that Docker build cannot use bspm as the security setting used at run-time is not available during build time * inst/docs/FAQ.md: Idem 2022-09-16 Dirk Eddelbuettel edd@debian.org * README.md: Mention the new mirror r2u.stat.illinois.edu * inst/scripts/add_cranapt_focal.sh: Use r2u.stat.illinois.edu * inst/scripts/add_cranapt_jammy.sh: Idem * docker/focal/run/cranapt.list: Idem * docker/jammy/run/cranapt.list: Idem 2022-09-14 John Blischak jdblischak@gmail.com * inst/scripts/add_cranapt_jammy.sh: Add missing 'apt update' 2022-09-11 Dirk Eddelbuettel edd@debian.org * README.md: Update to state 'current R' via CRAN apt repo * inst/scripts/add_cranapt_focal.sh: Idem * inst/scripts/add_cranapt_jammy.sh: Idem 2022-09-08 Dirk Eddelbuettel edd@debian.org * README.md: Update package number 2022-08-01 Dirk Eddelbuettel edd@debian.org * inst/dockerize/Dockerfile: Add 'dockerize' example * inst/dockerize/README.md: Short description 2022-07-12 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R (.addDepends): Special-case 'rJava' which does not resolve its shared library given that Java libs are hidden 2022-07-07 Dirk Eddelbuettel edd@debian.org * R/init.R (.loadDB, .loadAP): Make cache age a function parameter 2022-06-18 Dirk Eddelbuettel edd@debian.org * README.md (Pinning): Refined setup with origin and label * inst/scripts/add_cranapt_{focal,jammy}.sh: Idem * docker/{focal,jammy}/{build,run}: Idem 2022-06-17 Dirk Eddelbuettel edd@debian.org * R/package.R (buildPackage): Correct nlme and foreign download 2022-06-08 Dirk Eddelbuettel edd@debian.org * inst/docs/FAQ.md: Add entry on Singularity 2022-06-06 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Accomodate sp with epoch * README.md: Edits 2022-06-02 Dirk Eddelbuettel edd@debian.org * R/package.R: Accomodate dash-to-dot in nlme and foreign versions 2022-06-01 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Accomodate dash-to-dot in foreign version 2022-05-31 Dirk Eddelbuettel edd@debian.org * inst/docs/FAQ.md: Draft of two new entries 2022-05-29 Dirk Eddelbuettel edd@debian.org * R/package.R: Correct two invisible calls * R/controlFiles.R: Accomodate dash-to-dot in nlme version 2022-05-28 Sergio Oller sergioller@gmail.com * README.md: Add missing double-quote in example 2022-05-25 Dirk Eddelbuettel edd@debian.org * R/package.R: Support per-distribution blacklist * R/init.R: Idem * docker/focal/run/Dockerfile: Note '--security-opt seccomp=unconfined' needed for bspm use 2022-05-22 Dirk Eddelbuettel edd@debian.org * README.md: Reword headline 2022-05-21 Dirk Eddelbuettel edd@debian.org * inst/scripts/add_cranapt_focal.sh: Use CRAN repo for R * README.md: Ditto 2022-05-20 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Reflect repo in Description: 2022-05-17 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Build and cache in per distro dir * R/package.R: Ditto * docker/*/build/debBuild.sh: Add dist argument * README.md: Update package numbers 2022-05-15 Dirk Eddelbuettel edd@debian.org * R/controlFiles.R: Correct base package list * R/init.R: Filter commented lines from blacklist * R/package.R: New helper to identify updated packages 2022-05-13 Dirk Eddelbuettel edd@debian.org * R/package.R: New top-level function to build updated packages * R/init.R: Support * man/buildPackage.Rd: Docs * README.md: Update package numbers 2022-05-11 Dirk Eddelbuettel edd@debian.org * README.md: Switch instruction to downloading keys and storing in /etc/apt/trusted.gpg.d/ which is now preferred, additional edits 2022-05-09 Dirk Eddelbuettel edd@debian.org * inst/scripts/add_cranapt_jammy.sh: Update key use * R/init.R: Correct a cached=file time comparison 2022-05-08 Dirk Eddelbuettel edd@debian.org * R/package.R: Add nDeps * docker/jammy/run/Dockerfile: Use asc key file * .gitpod.Dockerfile: Switch to 22.04 2022-05-07 Dirk Eddelbuettel edd@debian.org * README.md: Updated docs * docs/*: Idem * docker/jammy/build/*: Use http instead of mount for pinning * docker/jammy/build/debBuild.sh: Call dpkg-buildpackage with -b * inst/scripts/add_cranapt_focal.sh: Renamed from add_cranapt.sh * inst/scripts/add_cranapt_jammy.sh: Added 2022-05-06 Dirk Eddelbuettel edd@debian.org * R/package.R: Support building for multiple LTS releases * R/init.R: Idem, skip test for R >= 4.0, two-tiered depends * DESCRIPTION: Depend on R >= 4.0 2022-05-04 Dirk Eddelbuettel edd@debian.org * R/package.R: Simpler interface * inst/examples/add_cranapt.sh: Renamed from setup_r2u.sh * README.md: Documentation updates 2022-05-03 Dirk Eddelbuettel edd@debian.org * Initial version","title":"2022"},{"location":"news/","text":"Version 0.0.8 (2024-11-04) Switch to BioConductor 3.20 and rebuild all r-bioc-* packages Version 0.0.7 (2024-05-12) Add support for Ubuntu 24.04 aka 'noble' Switch to BioConductor 3.19 and rebuild all r-bioc-* packages (in 'noble' aka 24.04, jammy and focal to follow) Version 0.0.6 (2023-11-04) Switch to BioConductor 3.18 and rebuild all r-bioc-* packages Version 0.0.5 (2023-04-29) Switch to BioConductor 3.17 and rebuild all r-bioc-* packages Version 0.0.4 (2022-11-19) Switch to BioConductor 3.16 and rebuild all r-bioc-* packages Version 0.0.3 (2022-09-16) Announce mirror r2u.stat.illinois.edu and use in scripts Version 0.0.2 (2022-05-08) New release with Ubuntu 22.04 support Version 0.0.1 (2022-05-04) Initial release for Ubuntu 20.04","title":"News"},{"location":"man/buildPackage/","text":"Build a Package Description Builds a package considering the repository information, dependencies and already built packages. Usage buildPackage(pkg, tgt, debug = FALSE, verbose = FALSE, force = FALSE, xvfb = FALSE, suffix = \".1\", debver = \"1.\", plusdfsg = FALSE, dryrun = FALSE) buildAll(pkg, tgt, debug = FALSE, verbose = FALSE, force = FALSE, xvfb = FALSE) topN(npkg, date = Sys.Date() - 1, from = 1L) topNCompiled(npkg, date = Sys.Date() - 1, from = 1L) nDeps(ndeps) buildUpdatedPackages(tgt, debug = FALSE, verbose = FALSE, force = FALSE, xvfb = FALSE, bioc = FALSE) Arguments pkg character Name of the CRAN or BioConductor package to build tgt character Name (or version) of the build target distribution, this is restricted to either \u201c20.04\u201d or \u201c22.04\u201d (or their names \u201cfocal\u201d or \u201cjammy\u201d) debug logical Optional value to show more debugging output, default is \u2018FALSE\u2019 verbose logical Optional value show more verbose progress output, default is \u2018FALSE\u2019 force logical Optional value to force package build from source, default is \u2018FALSE\u2019 xvfb logical Optional value to build under xvfb-run , default is \u2018FALSE\u2019 suffix character Optional value to override default package version suffix of \u2018.1\u2019 debver character Optional value for beginning of Debian build version, default \u20181.\u2019 plusdfsg logical Optional switch whether \u201c+dfsg\u201d gets appended to usptream, default \u2018FALSE\u2019 dryrun logical Optional value to skip actual package build step, default is \u2018FALSE\u2019 npkg integer Number of packages to build date Date Relevant date for cranlog download stats from integer Optional applied as offset to npkg to shift the selection Details The buildPackage function builds the given package. The buildAll package applies to all elements in the supplied vector of packages. The topN and topNCompiled helpers select \u2018N\u2019 among all (or all compiled) packages. The nDeps function builds packages with a given (adjusted) build-dependency count. The updatedPackages function finds a set of available packages that are not yet built. Note that this build process is still somewhat tailored to the build setup use by the author and is not (yet ?) meant to be universally transferable. It should be with a little care and possible examination of the code. If interested, please get in touch. Value Nothing as the function is invoked for the side effect of building binary packages Author(s) Dirk Eddelbuettel","title":"buildPackage"},{"location":"man/buildPackage/#build-a-package","text":"","title":"Build a Package"},{"location":"man/buildPackage/#description","text":"Builds a package considering the repository information, dependencies and already built packages.","title":"Description"},{"location":"man/buildPackage/#usage","text":"buildPackage(pkg, tgt, debug = FALSE, verbose = FALSE, force = FALSE, xvfb = FALSE, suffix = \".1\", debver = \"1.\", plusdfsg = FALSE, dryrun = FALSE) buildAll(pkg, tgt, debug = FALSE, verbose = FALSE, force = FALSE, xvfb = FALSE) topN(npkg, date = Sys.Date() - 1, from = 1L) topNCompiled(npkg, date = Sys.Date() - 1, from = 1L) nDeps(ndeps) buildUpdatedPackages(tgt, debug = FALSE, verbose = FALSE, force = FALSE, xvfb = FALSE, bioc = FALSE)","title":"Usage"},{"location":"man/buildPackage/#arguments","text":"pkg character Name of the CRAN or BioConductor package to build tgt character Name (or version) of the build target distribution, this is restricted to either \u201c20.04\u201d or \u201c22.04\u201d (or their names \u201cfocal\u201d or \u201cjammy\u201d) debug logical Optional value to show more debugging output, default is \u2018FALSE\u2019 verbose logical Optional value show more verbose progress output, default is \u2018FALSE\u2019 force logical Optional value to force package build from source, default is \u2018FALSE\u2019 xvfb logical Optional value to build under xvfb-run , default is \u2018FALSE\u2019 suffix character Optional value to override default package version suffix of \u2018.1\u2019 debver character Optional value for beginning of Debian build version, default \u20181.\u2019 plusdfsg logical Optional switch whether \u201c+dfsg\u201d gets appended to usptream, default \u2018FALSE\u2019 dryrun logical Optional value to skip actual package build step, default is \u2018FALSE\u2019 npkg integer Number of packages to build date Date Relevant date for cranlog download stats from integer Optional applied as offset to npkg to shift the selection","title":"Arguments"},{"location":"man/buildPackage/#details","text":"The buildPackage function builds the given package. The buildAll package applies to all elements in the supplied vector of packages. The topN and topNCompiled helpers select \u2018N\u2019 among all (or all compiled) packages. The nDeps function builds packages with a given (adjusted) build-dependency count. The updatedPackages function finds a set of available packages that are not yet built. Note that this build process is still somewhat tailored to the build setup use by the author and is not (yet ?) meant to be universally transferable. It should be with a little care and possible examination of the code. If interested, please get in touch.","title":"Details"},{"location":"man/buildPackage/#value","text":"Nothing as the function is invoked for the side effect of building binary packages","title":"Value"},{"location":"man/buildPackage/#authors","text":"Dirk Eddelbuettel","title":"Author(s)"},{"location":"man/r2u-package/","text":"Turn P3M/PPM/RSPM Binary Packages into Ubuntu Packages Description P3M/PPM/RSPM binary packages are turned into Ubuntu packages containing proper system dependency information. Package Content Index: This package was not yet installed at build time. Maintainer Dirk Eddelbuettel \\<edd@debian.org> Author(s) Dirk Eddelbuettel [aut, cre] (\\<https://orcid.org/0000-0001-6419-907X>)","title":"R2u package"},{"location":"man/r2u-package/#turn-p3mppmrspm-binary-packages-into-ubuntu-packages","text":"","title":"Turn P3M/PPM/RSPM Binary Packages into Ubuntu Packages"},{"location":"man/r2u-package/#description","text":"P3M/PPM/RSPM binary packages are turned into Ubuntu packages containing proper system dependency information.","title":"Description"},{"location":"man/r2u-package/#package-content","text":"Index: This package was not yet installed at build time.","title":"Package Content"},{"location":"man/r2u-package/#maintainer","text":"Dirk Eddelbuettel \\<edd@debian.org>","title":"Maintainer"},{"location":"man/r2u-package/#authors","text":"Dirk Eddelbuettel [aut, cre] (\\<https://orcid.org/0000-0001-6419-907X>)","title":"Author(s)"},{"location":"vignettes/Codespaces/","text":"r2u for Codespaces The .devcontainer directory provides a small self-containted file devcontainer.json to launch an executable environment R using r2u. It is based on the example in Grant McDermott's codespaces-r2u repo and reuses its documentation. It is driven by the Rocker Project's Devcontainer Features repo creating a fully functioning R environment for cloud use in a few minutes. And thanks to r2u you can add easily to this environment by installing new R packages in a fast and failsafe way. Try it out To get started, simply click on the green \"Code\" button at the top right. Then select the \"Codespaces\" tab and click the \"+\" symbol to start a new Codespace. The first time you do this, it will open up a new browser tab where your Codespace is being instantiated. This first-time instantiation will take a few minutes (feel free to click \"View logs\" to see how things are progressing) so please be patient. Once built, your Codespace will deploy almost immediately when you use it again in the future. After the VS Code editor opens up in your browser, feel free to open up the examples/sfExample.R file. It demonstrates how r2u enables us install packages and their system-dependencies with ease, here installing packages sf (including all its geospatial dependencies) and ggplot2 (including all its dependencies). You can run the code easily in the browser environment: Highlight or hover over line(s) and execute them by hitting Cmd + Return (Mac) / Ctrl + Return (Linux / Windows). Do not forget to close your Codespace once you have finished using it. Click the \"Codespaces\" tab at the very bottom left of your code editor / browser and select \"Close Current Codespace\" in the resulting pop-up box. You can restart it at any time, for example by going to https://github.com/codespaces and clicking on your instance. Extend r2u with r-universe r2u offers \"fast, easy, reliable\" access to all of CRAN via binaries for Ubuntu focal and jammy. When using the latter (as is the default), it can be combined with r-universe and its Ubuntu jammy binaries. We demontrates this in a second example file examples/censusExample.R which install both the cellxgene-census and tiledbsoma R packages as binaries from r-universe (along with about 100 dependencies), downloads single-cell data from Census and uses Seurat to create PCA and UMAP decomposition plots. Note that in order run this you have to change the Codespaces default instance from 'small' (4gb ram) to 'large' (16gb ram). Local DevContainer build Codespaces are DevContainers running in the cloud (where DevContainers are themselves just Docker images running with some VS Code sugar on top). This gives you the very powerful ability to 'edit locally' but 'run remotely' in the hosted codespace. To test this setup locally, simply clone the repo and open it up in VS Code. You will need to have Docker installed and running on your system (see here ). You will also need the Remote Development extension (you will probably be prompted to install it automatically if you do not have it yet). Select \"Reopen in Container\" when prompted. Otherwise, click the >< tab at the very bottom left of your VS Code editor and select this option. To shut down the container, simply click the same button and choose \"Reopen Folder Locally\". You can always search for these commands via the command palette too ( Cmd+Shift+p / Ctrl+Shift+p ). Use in Your Repo To add this ability of launching Codespaces in the browser (or editor) to a repo of yours, create a directory .devcontainers in your selected repo, and add the file .devcontainers/devcontainer.json . You can customize it by enabling other feature, or use the postCreateCommand field to install packages (while taking full advantage of r2u ). Acknowledgments There are a few key \"plumbing\" pieces that make everything work here. Thanks to: My Rocker Project colleague @eitsupi for maintaining the R DevContainer Features . @renkun-ken and the rest of the VS Code R extension team. @Enchufa2 for bspm making package installation to the sysstem so seamless. @grantmcdermott for the initial codespaces-r2u setup from which we derived this. Last but not least everybody who helped me make r2u possible, tested it, or sent hints for improvement.","title":"Codespaces"},{"location":"vignettes/Codespaces/#r2u-for-codespaces","text":"The .devcontainer directory provides a small self-containted file devcontainer.json to launch an executable environment R using r2u. It is based on the example in Grant McDermott's codespaces-r2u repo and reuses its documentation. It is driven by the Rocker Project's Devcontainer Features repo creating a fully functioning R environment for cloud use in a few minutes. And thanks to r2u you can add easily to this environment by installing new R packages in a fast and failsafe way.","title":"r2u for Codespaces"},{"location":"vignettes/Codespaces/#try-it-out","text":"To get started, simply click on the green \"Code\" button at the top right. Then select the \"Codespaces\" tab and click the \"+\" symbol to start a new Codespace. The first time you do this, it will open up a new browser tab where your Codespace is being instantiated. This first-time instantiation will take a few minutes (feel free to click \"View logs\" to see how things are progressing) so please be patient. Once built, your Codespace will deploy almost immediately when you use it again in the future. After the VS Code editor opens up in your browser, feel free to open up the examples/sfExample.R file. It demonstrates how r2u enables us install packages and their system-dependencies with ease, here installing packages sf (including all its geospatial dependencies) and ggplot2 (including all its dependencies). You can run the code easily in the browser environment: Highlight or hover over line(s) and execute them by hitting Cmd + Return (Mac) / Ctrl + Return (Linux / Windows). Do not forget to close your Codespace once you have finished using it. Click the \"Codespaces\" tab at the very bottom left of your code editor / browser and select \"Close Current Codespace\" in the resulting pop-up box. You can restart it at any time, for example by going to https://github.com/codespaces and clicking on your instance.","title":"Try it out"},{"location":"vignettes/Codespaces/#extend-r2u-with-r-universe","text":"r2u offers \"fast, easy, reliable\" access to all of CRAN via binaries for Ubuntu focal and jammy. When using the latter (as is the default), it can be combined with r-universe and its Ubuntu jammy binaries. We demontrates this in a second example file examples/censusExample.R which install both the cellxgene-census and tiledbsoma R packages as binaries from r-universe (along with about 100 dependencies), downloads single-cell data from Census and uses Seurat to create PCA and UMAP decomposition plots. Note that in order run this you have to change the Codespaces default instance from 'small' (4gb ram) to 'large' (16gb ram).","title":"Extend r2u with r-universe"},{"location":"vignettes/Codespaces/#local-devcontainer-build","text":"Codespaces are DevContainers running in the cloud (where DevContainers are themselves just Docker images running with some VS Code sugar on top). This gives you the very powerful ability to 'edit locally' but 'run remotely' in the hosted codespace. To test this setup locally, simply clone the repo and open it up in VS Code. You will need to have Docker installed and running on your system (see here ). You will also need the Remote Development extension (you will probably be prompted to install it automatically if you do not have it yet). Select \"Reopen in Container\" when prompted. Otherwise, click the >< tab at the very bottom left of your VS Code editor and select this option. To shut down the container, simply click the same button and choose \"Reopen Folder Locally\". You can always search for these commands via the command palette too ( Cmd+Shift+p / Ctrl+Shift+p ).","title":"Local DevContainer build"},{"location":"vignettes/Codespaces/#use-in-your-repo","text":"To add this ability of launching Codespaces in the browser (or editor) to a repo of yours, create a directory .devcontainers in your selected repo, and add the file .devcontainers/devcontainer.json . You can customize it by enabling other feature, or use the postCreateCommand field to install packages (while taking full advantage of r2u ).","title":"Use in Your Repo"},{"location":"vignettes/Codespaces/#acknowledgments","text":"There are a few key \"plumbing\" pieces that make everything work here. Thanks to: My Rocker Project colleague @eitsupi for maintaining the R DevContainer Features . @renkun-ken and the rest of the VS Code R extension team. @Enchufa2 for bspm making package installation to the sysstem so seamless. @grantmcdermott for the initial codespaces-r2u setup from which we derived this. Last but not least everybody who helped me make r2u possible, tested it, or sent hints for improvement.","title":"Acknowledgments"},{"location":"vignettes/FAQ/","text":"General Why is it called both CRANapt and r2u? We started out with the hope to eventually provide CRAN binaries for multiple distributions (Debian, Ubuntu, ...), releases (testing/stable, LTS/current, ...), hardware platforms, and so on. But we had to start somewhere, so Ubuntu LTS for amd64 is the first instance. And as we are effectively only on Ubuntu, at least for now, the shorter 'r2u' crept up, and stuck. How is it pronounced? We think of the 'n' as silent so you can always say \"oh I just crapted these packages onto my system\". A package reports it is uninstallable Make sure you follow the 'Pinnning' section of the README.md and the setup script . Some (older) builds in the (main) Ubuntu distribution appear to sort higher and would block an installation of the freshly made binary (under a consistent naming scheme). The apt feature of 'pinning' is what we want here to have an entire repository sort higher. There can also be other issues related to CRAN allowing a hyphen in version ( e.g. nlme is currently at 3.1-157. But Debian and Ubuntu use a hyphen to split off the build iteration count so version numbers are sometimes standardised to for example 3.1.157 switching the hyphen to a dot. Sadly that leads to different sorting. (See issue #7 for more on an issue that was caused by this.) In general we can not overcome this by pinning, and we continue to try to find a more comprehensive solution that is less invasive than changing many package version numbers. What is the relationship with the c2d4u PPA ? We are huge fans of the c2d4u repository and have used it for a decade or longer. It uses the proper build process, and sits on a very solid Launchpad infrastructure supported by Canonical. However, this also makes it a little less nimble and precludes for example use of external build resources. Overall it also still at a fraction of CRAN packages. So we created this repo as an experiment to see if we could scale a simple and direct approach, and in the hopes it can complement the c2d4u PPA and offer additional packages As of 2024, that hope has come to fruition as c2d4u is now taken a well-deserved hiatus, and recommends switching to r2u instead. Can I use (current) r2u with Debian? In general, it is not a good idea to mix packages from Debian and Ubuntu in the same installation. The package management system works so well for either because it generally can rely on proper package versions, dependencies, and relationships between packages. Mixing, while it may work in small isolated cases, is really not suitable to such setups. So we recommend against using (the current r2u setup which is Ubuntu-only) on Debian. (This question was also asked in issue #8 .) Can I install Bioconductor packages from Ubuntu not in r2u This used to be an issue in the earlier days. As of early 2024 and the BioConductor 3.18 release, we also ensure we had all packages covered by the (originall Debian and hence also in the) Ubuntu distribution. At that time, the distribution had around 170 packages whereas the set of packages covered by r2u increased to just over 400. With the combination of r2u generally having a newer version along with the recommended pinning you should always get the r2u version without issues. As of late 2024, and BioConductor 3.20, we have well over 400 packages from BioConductor for the (currently three) LTS releases we support. (And for historical context, back-then-when Ubuntu contained a number of Debian packages r-bioc-* . However, as the distribution cutoff for the 'jammy' (22.04) cutoff was before Bioconductor 3.15 was released so these packages had a dependency on the 'r-api-bioc-3.14' (virtual) package. To satisfy this with our r2u packages, which were then based on the newer Bioconductor 3.15 (and later upgraded to 3.16, 3.17, now 3.18), we added a small virtual package bioc-api-package that we added to the repo. So after sudo apt install bioc-api-package installation of the addional Bioconductor packages in jammy can proceed. For more details see issue #11 . Note that none of what is described in this second paragraph to the question is needed anymore given the changes described in the first. All good!) Can I use it with other non-LTS Ubuntu releases? Of course! You can always forward-upgrade. So for example the 22.04 (\"jammy\") release works perfectly fine with 22.10 (\"kinetic\"). Just make sure you keep the sources.list entry on the LTS release you have as we (just like many other repositories) only provide LTS releases and no interim releases. When running 22.10 / 23.04 / 23.10 / 24.10 on a laptop with r2u, we are aware of one binary for the av which ends up with a library dependency no longer satisified by the distribution. So we built ourselves an ad-hoc new binary of r-cran-av for the distro we ran. We will keep an eye on this to see if it affects other packages. If you find one, please file an issue. We think we can address this with a supplementary repo on an 'as-needed' basis. Why does it have more packages than CRAN ? We (at least currently) do not purge packages from r2u that have been archived at CRAN. Hence the set of packages at r2u grows faster and further leading to a (as of fall 2023) ten percent difference relative to CRAN. What about other architectures besides x86_64 ? Excellent question. CRAN builds for at least three different OSs, Debian binaries are provided on maybe 15 hardware platforms so 'how hard can it be?' you may ask (and some have in issues #40 and #55 ). Sadly, quite hard. This is essentially somewhere between the third or fourth time I tried to build something like this (some history is in this paper ), and it only got as (amazingly !) far as it is has gotten because I could build on existing binaries. None of that rich infrastructure exists for other hardware platforms, and recall that all this also works by plugging into and relying on apt so it would have to be a Debian (or Ubuntu) platform. Now, thanks to expanded support at GitHub Actions we can also support arm64. But direct hardware access would of course be preferable. If you read this and happen to be, say, a product manager at a large cloud provider, get in touch. I have the infrastructure here, and nearly three decades of experience creating .deb packages. This can be done and on some platforms it makes a ton of sense to add support and the beginning of arm64 support shows. Otherwise the focus will remain in a x86_64 world. Why can I not uninstall packages with remove.packages() ? This issue is known and documented, for example under known issues in the main GitHub README shadowed in the main page of the documentation . The bspm package traces install.packages() to facilitate installation; removal is a little more complicated as discussed in this issue at the bspm repo . However, bspm provides a function bspm::remove_sys() to remove a package installed via r2u as a system package. Also see isues #75 and #35 . Can I install and use older versions by choice ? Of course! One key aspect of using R on Debian / Ubuntu is that the order the library path directories (shown by calling .libPaths() ) such that the system libraries come last. This means that you can always call bspm::disable(); install.packages(\"some_package\") to install some_package into either your personal repository within $HOME or into /usr/local/lib/R/site-packages/ . Just make sure to disable bspm to be able to install 'normally' from source. See issue #75 where this is discussed a little too and an example is provided. Should I install bspm? We find it helpful. It allows you to use install.packages() in R, or script install.r , and refer to CRAN and BioConductor packages by their names which is more natural. bspm will call apt for you. Hence our default Docker image has bspm installed and enabled by default. (Also see below though for docker build and bspm .) bspm is a little noisy You can wrap suppressMessages() around bspm::enable() . We now do so in the Docker image. With the 22.04 \"jammy\" container I get 'Cannot connect' errors We found that adding --security-opt seccomp=unconfined to the docker invocation silenced those on AWS hosts and possibly other systems. This may be related to Ubuntu hosts only. A side-effect of this required security policy statement for bspm is that bspm is not available when building containers off r2u . It appears that Docker rules this out during builds. The only remedy is to use bspm::disable() and to rely on just apt to install the r2u packages in derived containers. Can one use r2u with Singularity containers? Yes, as discussed in this GitHub issue . The key is that Singularity does not allow root access, yet we need to install packages via bspm . The best answer is this to start from the base container, add packages as needed to create a new Docker container -- and transfer / transform that container for Singularity use. The running example in that issue is installing Seurat and moderately complex and extended dependencies. Thanks to how r2u is set up a simpler Dockerfile such as FROM rocker/r2u:22.04 RUN install.r Seurat which by using install.r (from littler along with bspm turns this into a call to apt . Call as, say, docker build -t r2u_seurat:22.04 . and enjoy the resulting container r2u_seurat:22.04 (or give it any other suitable name) and build a suitable .sif from it as discussed in the issue. How can one know when it was updated We follow P3M/PPM/RSPM builds so their update tracker there can be helpful. We currently have no 'lastBuilt' tag on the website but could add one if that helped.","title":"FAQ"},{"location":"vignettes/FAQ/#general","text":"","title":"General"},{"location":"vignettes/FAQ/#why-is-it-called-both-cranapt-and-r2u","text":"We started out with the hope to eventually provide CRAN binaries for multiple distributions (Debian, Ubuntu, ...), releases (testing/stable, LTS/current, ...), hardware platforms, and so on. But we had to start somewhere, so Ubuntu LTS for amd64 is the first instance. And as we are effectively only on Ubuntu, at least for now, the shorter 'r2u' crept up, and stuck.","title":"Why is it called both CRANapt and r2u?"},{"location":"vignettes/FAQ/#how-is-it-pronounced","text":"We think of the 'n' as silent so you can always say \"oh I just crapted these packages onto my system\".","title":"How is it pronounced?"},{"location":"vignettes/FAQ/#a-package-reports-it-is-uninstallable","text":"Make sure you follow the 'Pinnning' section of the README.md and the setup script . Some (older) builds in the (main) Ubuntu distribution appear to sort higher and would block an installation of the freshly made binary (under a consistent naming scheme). The apt feature of 'pinning' is what we want here to have an entire repository sort higher. There can also be other issues related to CRAN allowing a hyphen in version ( e.g. nlme is currently at 3.1-157. But Debian and Ubuntu use a hyphen to split off the build iteration count so version numbers are sometimes standardised to for example 3.1.157 switching the hyphen to a dot. Sadly that leads to different sorting. (See issue #7 for more on an issue that was caused by this.) In general we can not overcome this by pinning, and we continue to try to find a more comprehensive solution that is less invasive than changing many package version numbers.","title":"A package reports it is uninstallable"},{"location":"vignettes/FAQ/#what-is-the-relationship-with-the-c2d4u-ppa","text":"We are huge fans of the c2d4u repository and have used it for a decade or longer. It uses the proper build process, and sits on a very solid Launchpad infrastructure supported by Canonical. However, this also makes it a little less nimble and precludes for example use of external build resources. Overall it also still at a fraction of CRAN packages. So we created this repo as an experiment to see if we could scale a simple and direct approach, and in the hopes it can complement the c2d4u PPA and offer additional packages As of 2024, that hope has come to fruition as c2d4u is now taken a well-deserved hiatus, and recommends switching to r2u instead.","title":"What is the relationship with the c2d4u PPA ?"},{"location":"vignettes/FAQ/#can-i-use-current-r2u-with-debian","text":"In general, it is not a good idea to mix packages from Debian and Ubuntu in the same installation. The package management system works so well for either because it generally can rely on proper package versions, dependencies, and relationships between packages. Mixing, while it may work in small isolated cases, is really not suitable to such setups. So we recommend against using (the current r2u setup which is Ubuntu-only) on Debian. (This question was also asked in issue #8 .)","title":"Can I use (current) r2u with Debian?"},{"location":"vignettes/FAQ/#can-i-install-bioconductor-packages-from-ubuntu-not-in-r2u","text":"This used to be an issue in the earlier days. As of early 2024 and the BioConductor 3.18 release, we also ensure we had all packages covered by the (originall Debian and hence also in the) Ubuntu distribution. At that time, the distribution had around 170 packages whereas the set of packages covered by r2u increased to just over 400. With the combination of r2u generally having a newer version along with the recommended pinning you should always get the r2u version without issues. As of late 2024, and BioConductor 3.20, we have well over 400 packages from BioConductor for the (currently three) LTS releases we support. (And for historical context, back-then-when Ubuntu contained a number of Debian packages r-bioc-* . However, as the distribution cutoff for the 'jammy' (22.04) cutoff was before Bioconductor 3.15 was released so these packages had a dependency on the 'r-api-bioc-3.14' (virtual) package. To satisfy this with our r2u packages, which were then based on the newer Bioconductor 3.15 (and later upgraded to 3.16, 3.17, now 3.18), we added a small virtual package bioc-api-package that we added to the repo. So after sudo apt install bioc-api-package installation of the addional Bioconductor packages in jammy can proceed. For more details see issue #11 . Note that none of what is described in this second paragraph to the question is needed anymore given the changes described in the first. All good!)","title":"Can I install Bioconductor packages from Ubuntu not in r2u"},{"location":"vignettes/FAQ/#can-i-use-it-with-other-non-lts-ubuntu-releases","text":"Of course! You can always forward-upgrade. So for example the 22.04 (\"jammy\") release works perfectly fine with 22.10 (\"kinetic\"). Just make sure you keep the sources.list entry on the LTS release you have as we (just like many other repositories) only provide LTS releases and no interim releases. When running 22.10 / 23.04 / 23.10 / 24.10 on a laptop with r2u, we are aware of one binary for the av which ends up with a library dependency no longer satisified by the distribution. So we built ourselves an ad-hoc new binary of r-cran-av for the distro we ran. We will keep an eye on this to see if it affects other packages. If you find one, please file an issue. We think we can address this with a supplementary repo on an 'as-needed' basis.","title":"Can I use it with other non-LTS Ubuntu releases?"},{"location":"vignettes/FAQ/#why-does-it-have-more-packages-than-cran","text":"We (at least currently) do not purge packages from r2u that have been archived at CRAN. Hence the set of packages at r2u grows faster and further leading to a (as of fall 2023) ten percent difference relative to CRAN.","title":"Why does it have more packages than CRAN ?"},{"location":"vignettes/FAQ/#what-about-other-architectures-besides-x86_64","text":"Excellent question. CRAN builds for at least three different OSs, Debian binaries are provided on maybe 15 hardware platforms so 'how hard can it be?' you may ask (and some have in issues #40 and #55 ). Sadly, quite hard. This is essentially somewhere between the third or fourth time I tried to build something like this (some history is in this paper ), and it only got as (amazingly !) far as it is has gotten because I could build on existing binaries. None of that rich infrastructure exists for other hardware platforms, and recall that all this also works by plugging into and relying on apt so it would have to be a Debian (or Ubuntu) platform. Now, thanks to expanded support at GitHub Actions we can also support arm64. But direct hardware access would of course be preferable. If you read this and happen to be, say, a product manager at a large cloud provider, get in touch. I have the infrastructure here, and nearly three decades of experience creating .deb packages. This can be done and on some platforms it makes a ton of sense to add support and the beginning of arm64 support shows. Otherwise the focus will remain in a x86_64 world.","title":"What about other architectures besides x86_64 ?"},{"location":"vignettes/FAQ/#why-can-i-not-uninstall-packages-with-removepackages","text":"This issue is known and documented, for example under known issues in the main GitHub README shadowed in the main page of the documentation . The bspm package traces install.packages() to facilitate installation; removal is a little more complicated as discussed in this issue at the bspm repo . However, bspm provides a function bspm::remove_sys() to remove a package installed via r2u as a system package. Also see isues #75 and #35 .","title":"Why can I not uninstall packages with remove.packages() ?"},{"location":"vignettes/FAQ/#can-i-install-and-use-older-versions-by-choice","text":"Of course! One key aspect of using R on Debian / Ubuntu is that the order the library path directories (shown by calling .libPaths() ) such that the system libraries come last. This means that you can always call bspm::disable(); install.packages(\"some_package\") to install some_package into either your personal repository within $HOME or into /usr/local/lib/R/site-packages/ . Just make sure to disable bspm to be able to install 'normally' from source. See issue #75 where this is discussed a little too and an example is provided.","title":"Can I install and use older versions by choice ?"},{"location":"vignettes/FAQ/#should-i-install-bspm","text":"We find it helpful. It allows you to use install.packages() in R, or script install.r , and refer to CRAN and BioConductor packages by their names which is more natural. bspm will call apt for you. Hence our default Docker image has bspm installed and enabled by default. (Also see below though for docker build and bspm .)","title":"Should I install bspm?"},{"location":"vignettes/FAQ/#bspm-is-a-little-noisy","text":"You can wrap suppressMessages() around bspm::enable() . We now do so in the Docker image.","title":"bspm is a little noisy"},{"location":"vignettes/FAQ/#with-the-2204-jammy-container-i-get-cannot-connect-errors","text":"We found that adding --security-opt seccomp=unconfined to the docker invocation silenced those on AWS hosts and possibly other systems. This may be related to Ubuntu hosts only. A side-effect of this required security policy statement for bspm is that bspm is not available when building containers off r2u . It appears that Docker rules this out during builds. The only remedy is to use bspm::disable() and to rely on just apt to install the r2u packages in derived containers.","title":"With the 22.04 \"jammy\" container I get 'Cannot connect' errors"},{"location":"vignettes/FAQ/#can-one-use-r2u-with-singularity-containers","text":"Yes, as discussed in this GitHub issue . The key is that Singularity does not allow root access, yet we need to install packages via bspm . The best answer is this to start from the base container, add packages as needed to create a new Docker container -- and transfer / transform that container for Singularity use. The running example in that issue is installing Seurat and moderately complex and extended dependencies. Thanks to how r2u is set up a simpler Dockerfile such as FROM rocker/r2u:22.04 RUN install.r Seurat which by using install.r (from littler along with bspm turns this into a call to apt . Call as, say, docker build -t r2u_seurat:22.04 . and enjoy the resulting container r2u_seurat:22.04 (or give it any other suitable name) and build a suitable .sif from it as discussed in the issue.","title":"Can one use r2u with Singularity containers?"},{"location":"vignettes/FAQ/#how-can-one-know-when-it-was-updated","text":"We follow P3M/PPM/RSPM builds so their update tracker there can be helpful. We currently have no 'lastBuilt' tag on the website but could add one if that helped.","title":"How can one know when it was updated"}]}